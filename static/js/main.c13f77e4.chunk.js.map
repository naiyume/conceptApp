{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","handleFileRead","e","content","state","fileReader","result","response","readFile","element","document","createElement","file","Blob","excelOutput","type","href","URL","createObjectURL","download","body","appendChild","console","log","JSON","stringify","setState","JSONoutput","handleCreateReverse","output","reverseRead","textAreaValue","handleFileChosen","FileReader","onloadend","readAsText","getNumSpaces","str","numStart","i","length","substring","removeLeading","handleChange","event","target","value","data","jsonString","jsonList","parse","jsonIndex","referenced","clean","currFile","keys","Object","j","nextObj","includes","push","Array","isArray","toReplace","k","toCheck","match","cId","currKeys","finalMatrix","finalHeader","finalConcepts","maxes","conceptSeen","final","this","recurseRead","max","first","found","splice","toExcel","map","indexOf","join","finalArr","currItem","toInsert","currKey","hasOwnProperty","currArr","curr","key","isSource","firstWithoutconceptId","toChange","arr","returned","kList","a","Math","floor","random","conceptIdList","num","generateNine","cluster","header","nameToConcept","indexVariableName","conceptIdObject","sourceJSONS","nonEmpty","conceptIdObjectKeys","conceptIdIndices","conceptIdReverseLookup","parseInt","trim","firstRowJSON","firstRow","generateRandomUUID","conceptColNames","currId","currVarName","currJSON","newJSON","collections","collectionIds","leaves","leafIndex","leafObj","currCollection","leaf","currRow","nonEmptyIndex","currValue","val","split","cid","objKeys","strData","toPush","idsToInsert","leftMost","varLabelIndex","currCluster","idsFound","leftMostStart","firstNotSource","lines","x","line","CSVToArray","lookForConcepts","nonIntersects","sort","b","toWrite","finalConceptIndices","general","getConceptIds","processCluster","toPrint","className","style","id","accept","onChange","files","s","item","rows","cols","onClick","React","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,8HC6+B5BC,G,8DAv+Bb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IA83BRC,eAAiB,SAACC,GAChB,IAAMC,EAAU,EAAKC,MAAMC,WAAWC,OAClCC,EAAW,EAAKC,SAASL,GACvBM,EAAUC,SAASC,cAAc,KACjCC,EAAO,IAAIC,KAAK,CAAC,EAAKT,MAAMU,aAAc,CAACC,KAAM,eACvDN,EAAQO,KAAOC,IAAIC,gBAAgBN,GACnCH,EAAQU,SAAW,aACnBT,SAASU,KAAKC,YAAYZ,GAE1Ba,QAAQC,IAAIC,KAAKC,UAAUlB,IAC3B,EAAKmB,SAAS,CAACC,WAAWpB,KAz4BV,EA44BlBqB,oBAAsB,SAAC1B,GACrB,IAAI2B,EAAS,EAAKC,YAAY,EAAK1B,MAAM2B,eAEnCtB,EAAUC,SAASC,cAAc,KACjCC,EAAO,IAAIC,KAAK,CAACgB,GAAS,CAACd,KAAM,eACvCN,EAAQO,KAAOC,IAAIC,gBAAgBN,GACnCH,EAAQU,SAAW,aACnBT,SAASU,KAAKC,YAAYZ,IAn5BV,EAu5BlBuB,iBAAmB,SAACpB,GAClB,EAAKR,MAAMC,WAAa,IAAI4B,WAC5B,EAAK7B,MAAMC,WAAW6B,UAAY,EAAKjC,eACvC,EAAKG,MAAMC,WAAW8B,WAAWvB,IA15BjB,EA45BlBwB,aAAa,SAACC,GAEZ,IADA,IAAIC,EAAW,EACPC,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,IAAI,CACjC,GAA4B,KAAzBF,EAAII,UAAUF,EAAGA,EAAE,GAIpB,OAAkB,GAAXD,EAAgB,KAHvBA,GAAY,EAMhB,OAAkB,GAAXA,EAAgB,MAt6BP,EAw6BlBI,cAAgB,SAACL,GAEf,IADA,IAAIC,EAAW,EACPC,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,IAAI,CACjC,GAA4B,KAAzBF,EAAII,UAAUF,EAAGA,EAAE,GAIpB,OAAOF,EAAII,UAAUH,GAHrBA,GAAY,EAMhB,OAAOD,EAAII,UAAUH,IAl7BL,EAo7BlBK,aAAe,SAACC,GACdtB,QAAQC,IAAI,EAAKnB,MAAM2B,eACvB,EAAKL,SAAS,CAACK,cAAca,EAAMC,OAAOC,SAp7B1C,EAAK1C,MAAO,CACVuB,WAAY,GACZtB,WAAW,GACX0C,KAAM,GACNjC,YAAY,GACZiB,cAAc,IAPA,E,wDAYRiB,GAIR,IAFA,IAAIC,EAAWzB,KAAK0B,MAAMF,GACtBG,EAAY,GACRZ,EAAI,EAAGA,EAAIU,EAAST,OAAQD,IAAI,CAEpCY,EADeF,EAASV,GACN,WAAiBA,EAKvC,IAFA,IAAIa,EAAa,GACbC,EAAQ,GACJd,EAAI,EAAGA,EAAIU,EAAST,OAAQD,IAGhC,IAFA,IAAIe,EAAWL,EAASV,GACpBgB,EAAOC,OAAOD,KAAKD,GACfG,EAAI,EAAGA,EAAIF,EAAKf,OAAQiB,IAAI,CAChC,IAAIC,EAAUJ,EAASC,EAAKE,IAM5B,GALGF,EAAKE,GAAGE,SAAS,YACZN,EAAMM,SAASpB,IACfc,EAAMO,KAAKrB,IAGhBsB,MAAMC,QAAQJ,GAAS,CAGtB,IADA,IAAIK,EAAY,GACRC,EAAI,EAAGA,EAAIN,EAAQlB,OAAQwB,IAAI,CACnC,IAAIC,EAAUP,EAAQM,GAEtB,GAAqC,MAAlCC,EAAQC,MAAM,iBAAyB,CACtC,IAAIC,EAAMF,EAAQxB,UAAU,EAAE,GAC9BsB,EAAUH,KAAKX,EAASE,EAAUgB,KAC9Bf,EAAWO,SAASR,EAAUgB,KAC9Bf,EAAWQ,KAAKT,EAAUgB,KAKnCJ,EAAUvB,OAAS,IAClBc,EAASC,EAAKE,IAAMM,QAGvB,GAAqB,iBAAXL,GACX,GAAqC,MAAlCA,EAAQQ,MAAM,iBAAyB,CACtC,IAAIC,EAAMT,EAAQjB,UAAU,EAAE,GAC9Ba,EAASC,EAAKE,IAAMR,EAASE,EAAUgB,IACnCf,EAAWO,SAASR,EAAUgB,KAC9Bf,EAAWQ,KAAKT,EAAUgB,SAKlC,CAGA,IAFA,IAAIC,EAAWZ,OAAOD,KAAKG,GACvBK,EAAY,GACRC,EAAI,EAAGA,EAAII,EAAS5B,OAAQwB,IAChC,GAAGI,EAASJ,GAAGE,MAAM,iBAAiB,CAClC,IAAIC,EAAMC,EAASJ,GAAGvB,UAAU,EAAE,GAClCsB,EAAUL,EAAQU,EAASJ,KAAOf,EAASE,EAAUgB,IACjDf,EAAWO,SAASR,EAAUgB,KAC9Bf,EAAWQ,KAAKT,EAAUgB,IAInCX,OAAOD,KAAKG,GAASlB,OAAS,IAC7Bc,EAASC,EAAKE,IAAMM,IAMpC,IAAI,IAAIxB,EAAI,EAAGA,EAAIU,EAAST,OAAQD,IAC5Ba,EAAWO,SAASpB,IAChBc,EAAMM,SAASpB,IACfc,EAAMO,KAAKrB,GAWvB,IALA,IAAI8B,EAAc,GACdC,EAAc,GACdC,EAAgB,GAChBC,EAAQ,GAEJjC,EAAI,EAAGA,EAAIc,EAAMb,OAAQD,IAAK,CAClC,IAAIkC,EAAc,CAACxB,EAASI,EAAMd,IAAf,WACfmC,EAAQ,GACZC,KAAKC,YAAY3B,EAASI,EAAMd,IAAImC,EAAO,GAAID,GAC/CJ,EAAYT,KAAKc,GASjB,IAHA,IAAInB,EAAOC,OAAOD,KAAKmB,GAEnBG,EAAM,EACFpB,EAAI,EAAGA,EAAIF,EAAKf,OAAQiB,IACxBa,EAAYX,SAASJ,EAAKE,KAAQc,EAAcZ,SAASJ,EAAKE,MAC1DF,EAAKE,GAAGE,SAAS,aAMjBY,EAAcX,KAAKL,EAAKE,IALpBF,EAAKE,GAAGE,SAAS,kBAAqBJ,EAAKE,GAAGE,SAAS,mBACvDW,EAAYV,KAAKL,EAAKE,KAQ/BiB,EAAMnB,EAAKE,IAAIjB,OAASqC,IACvBA,EAAMH,EAAMnB,EAAKE,IAAIjB,QAI7BgC,EAAMZ,KAAKiB,GAsCf,IADA,IAAIC,GAAQ,EACJvC,EAAI,EAAGA,EAAI+B,EAAY9B,OAAQD,IAAI,CAEvC,IADA,IAAIwC,GAAQ,EACJtB,EAAI,EAAGA,EAAIc,EAAc/B,OAAQiB,IAClCc,EAAcd,GAAGE,SAASW,EAAY/B,MACrC+B,EAAYU,OAAOzC,EAAE,EAAEgC,EAAcd,IACrClB,GAAK,EACLkB,EAAIc,EAAc/B,OAClBuC,GAAO,GAGH,GAATA,GAA2B,GAATD,IACjBR,EAAYU,OAAOzC,EAAE,EAAE,aACvBA,GAAK,EACLuC,GAAQ,GAQhB,IAAIG,EAAU,GACdA,GAAWX,EAAYY,KAAI,SAASpC,GAChC,OAAkC,GAA/BA,EAAMqC,QAAQ,aACN,aAEe,GAAvBrC,EAAMqC,QAAQ,KACN,IAAOrC,EAAQ,IAET,KAATA,EACG,GAGAA,KAEZsC,KAAK,KAER,IAAI,IAAI7C,EAAG,EAAIA,EAAI8B,EAAY7B,OAAQD,IAAI,CAMvC,IAJA,IAAIsC,EAAML,EAAMjC,GACZ8C,EAAW,GACXC,EAAWjB,EAAY9B,GAEnByB,EAAI,EAAGA,EAAIa,EAAKb,IAAI,CAExB,IADA,IAAIuB,EAAW,GACP9B,EAAI,EAAGA,EAAIa,EAAY9B,OAAQiB,IAEnC8B,EAAS3B,KAAK,IAGlByB,EAASzB,KAAK2B,GAElB,IAAI,IAAI9B,EAAI,EAAGA,EAAIa,EAAY9B,OAAQiB,IAAI,CACvC,IAAI+B,EAAUlB,EAAYb,GAE1B,GAAG6B,EAASG,eAAeD,GAAS,CAChC,IAAIE,EAAUJ,EAASE,GACvB,GAAc,KAAXA,EACC,IAAI,IAAIxB,EAAI,EAAGA,EAAI0B,EAAQlD,OAAQwB,IAC/BqB,EAASrB,GAAGP,GAAKiC,EAAQ1B,IAKzC,IAAI,IAAIP,EAAI,EAAGA,EAAI4B,EAAS7C,OAAQiB,IAChCwB,GAAW,KACXA,GAAWI,EAAS5B,GAAGyB,KAAI,SAASpC,GAChC,OAA0B,GAAvBA,EAAMqC,QAAQ,KACN,IAAOrC,EAAQ,IAGfA,KAEZsC,KAAK,KAQhB,OAAOH,I,kCAKCU,EAAKjB,EAAOkB,EAAKnB,EAAaoB,GACtC,IAAItC,EAAOC,OAAOD,KAAKoC,GAGvB,GAAGA,EAAKF,eAAe,cAAuB,IAAPG,EAAU,CAC7C,IAAIlC,EAAUiC,EAAI,UAClB,GAAU,kBAAPC,GAAkC,iBAAPA,EAAuB,CAGjD,IAFA,IAAIb,GAAS,EACTe,GAAyB,EACrBvD,EAAI,EAAGA,EAAIgB,EAAKf,OAAQD,IACzBmC,EAAMe,eAAe,YAAclC,EAAKhB,KAAkB,IAAXgB,EAAKhB,IAAuB,kBAAXgB,EAAKhB,IAAoC,iBAAXgB,EAAKhB,KAAmC,GAAVwC,IAC3HA,EAAQxC,GAERgB,EAAKhB,GAAGoB,SAAS,eAA0C,GAA1BmC,GAA0C,kBAAXvC,EAAKhB,IAAoC,iBAAXgB,EAAKhB,KACnGuD,EAAwBvD,GAGhC,IAAIwD,EAAW,GAEXA,GADS,GAAVhB,EACYxB,EAAKuC,GAGLvC,EAAKwB,GAGjBL,EAAMe,eAAe,YAAcM,GAC9BrB,EAAM,YAAcqB,GAAUpC,SAASD,IACvCgB,EAAM,YAAcqB,GAAUnC,KAAKF,GAIvCgB,EAAM,YAAcqB,GAAY,CAACrC,QAIlCgB,EAAMe,eAAe,YAAcG,GAC9BlB,EAAM,YAAckB,GAAKjC,SAASD,IAClCgB,EAAM,YAAckB,GAAKhC,KAAKF,GAIlCgB,EAAM,YAAckB,GAAO,CAAClC,GAMxC,IAAI,IAAID,EAAI,EAAGA,EAAIF,EAAKf,OAAQiB,IAAI,CAChC,IAAIC,EAAUiC,EAAKpC,EAAKE,IACxB,GAAGI,MAAMC,QAAQJ,IAEb,IADA,IAAIsC,EAAM,GACFhC,EAAI,EAAGA,EAAGN,EAAQlB,OAAQwB,IAC9B,GAAwB,iBAAdN,EAAQM,KACVS,EAAYd,SAASD,EAAQM,GAAR,aACrBS,EAAYb,KAAKF,EAAO,YACpBkC,EAAIjC,SAAS,WAAU,CACvB,IAAIsC,EAAWtB,KAAKC,YAAYlB,EAAQM,GAAIU,EAAOnB,EAAKE,GAAIgB,GAC5DuB,EAAIpC,KAAKqC,SAaxB,GAAqB,iBAAXvC,EACG,aAAXH,EAAKE,IAA4B,aAAPmC,EACf,IAAPA,GAAoB,iBAAPA,EACTlB,EAAMe,eAAelC,EAAKE,IACrBiB,EAAMnB,EAAKE,IAAIE,SAASD,IACxBgB,EAAMnB,EAAKE,IAAIG,KAAKF,GAIxBgB,EAAMnB,EAAKE,IAAM,CAACC,GAMnBgB,EAAMe,eAAeG,GAChBlB,EAAMkB,GAAKjC,SAASD,IACpBgB,EAAMkB,GAAKhC,KAAKF,GAKpBgB,EAAMkB,GAAO,CAAClC,GAOP,aAAXH,EAAKE,IAA4B,IAAPmC,IAC3BlB,EAAMe,eAAe,YAAcG,GAC9BlB,EAAM,YAAckB,GAAKjC,SAASD,IAClCgB,EAAM,YAAckB,GAAKhC,KAAKF,GAIlCgB,EAAM,YAAckB,GAAO,CAAClC,SAQpC,IAAIA,EAAQ+B,eAAe,eAAiBhB,EAAYd,SAASD,EAAO,WACpE,GAAGA,EAAQ+B,eAAe,aACtBhB,EAAYb,KAAKF,EAAO,WACxBiB,KAAKC,YAAYlB,EAASgB,EAAOnB,EAAKE,GAAIgB,QAK1C,IAFA,IAAIyB,EAAQ1C,OAAOD,KAAKG,GAEhBM,EAAI,EAAGA,EAAIkC,EAAM1D,OAAQwB,IAE1BN,EAAQwC,EAAMlC,IAAIyB,eAAe,kBAAoB/B,EAAQwC,EAAMlC,IAAd,aAAkCL,SAAS,OAC/FD,EAAQwC,EAAMlC,IAAd,aAAoCkC,EAAMlC,GAAK,IAAMN,EAAQwC,EAAMlC,IAAd,cAEzDW,KAAKC,YAAYlB,EAAQwC,EAAMlC,IAAKU,EAAOnB,EAAKE,GAAIgB,M,qCAe1E,IADA,IAAI0B,EAAI,GACA5D,EAAI,EAAGA,EAAI,EAAGA,IAAI,CAEtB4D,GADQC,KAAKC,MAAoB,GAAdD,KAAKE,UAG5B,OAAOH,I,yCAGUI,GAGjB,IADA,IAAIC,EAAM7B,KAAK8B,gBACRF,EAAc5C,SAAS6C,IAAK,CAE/B,OADU7B,KAAK8B,kB,qCAKNC,EAASC,EAAQC,EAAeC,EAAmBN,EAAeO,EAAiBC,EAAa9D,GAO3G,IANA,IAAI+D,EAAW,GAEXC,EAAqBzD,OAAOD,KAAKuD,GACjCI,EAAmB,GAEnBC,EAAyB,GACrB5E,EAAI,EAAGA,EAAI0E,EAAoBzE,OAAQD,IAC3C2E,EAAiBtD,KAAKwD,SAASH,EAAoB1E,KACnD4E,EAAuBL,EAAgBG,EAAoB1E,KAAO6E,SAASH,EAAoB1E,IAGnG,IAAI,IAAIA,EAAI,EAAGA,EAAImE,EAAQlE,OAAQD,IAE/B,IADA,IAAImD,EAAUgB,EAAQnE,GACdkB,EAAI,EAAGA,EAAIiC,EAAQlD,OAAQiB,IACT,IAAnBiC,EAAQjC,GAAG4D,QAAeH,EAAiBvD,SAASF,IAC/CuD,EAASrD,SAASF,IAClBuD,EAASpD,KAAKH,GAM9B,IAAI6D,EAAe,GACfC,EAAWb,EAAQ,GAEvBpF,QAAQC,IAAIC,KAAKC,UAAUqF,IAC3B,IAAI,IAAIvE,EAAI,EAAGA,EAAIgF,EAAS/E,OAAQD,KACd,IAAfgF,EAAShF,KAAayE,EAASrD,SAASpB,IAAO2E,EAAiBvD,SAASpB,IAA2B,aAArBuE,EAAgBvE,MAC9F+E,EAAaX,EAAOpE,IAAMgF,EAAShF,IAG3CjB,QAAQC,IAAIC,KAAKC,UAAU6F,IACvBA,EAAa7B,eAAe,cAA6C,IAA7B6B,EAAY,YACrDV,EAAcnB,eAAe8B,EAASV,KACrCS,EAAY,UAAgBV,EAAcW,EAASV,IAC/CN,EAAc5C,SAAS2D,EAAY,YACnCf,EAAc3C,KAAK0D,EAAY,aAIlCA,EAAY,UAAgB3C,KAAK6C,mBAAmBjB,GACpDA,EAAc3C,KAAK0D,EAAY,WAC/BV,EAAcW,EAASV,IAAsBS,EAAY,YAGlEC,EAASJ,EAAsB,WAAiBG,EAAY,UAI5D,IADA,IAAIG,EAAkBjE,OAAOD,KAAK4D,GAC1B5E,EAAI,EAAGA,EAAIkF,EAAgBjF,OAAQD,IACvC,IAA4C,GAAzCkF,EAAgBlF,GAAG4C,QAAQ,UAAgB,CAC1C,IAAIuC,EAASH,EAASJ,EAAuBM,EAAgBlF,KAEzDoF,EAAcJ,EAASJ,EAAuBM,EAAgBlF,IAAM,GAE3D,IAAVmF,GAAgBd,EAAcnB,eAAekC,KAC5CD,EAASd,EAAce,IAI3B,IADA,IAAI5C,GAAS,EACLtB,EAAI,EAAGA,EAAIsD,EAAYvE,OAAQiB,IAAI,CACvC,IAAImE,EAAWb,EAAYtD,GACd,IAAViE,GAAgBE,EAAQ,WAAiBF,GACxC3C,EAAQxC,EACJqF,EAAQ,eAAmBjE,SAAS2D,EAAY,UAAgB,UAChEM,EAAQ,eAAmBhE,KAAK0D,EAAY,UAAgB,SAEhE7D,EAAIsD,EAAYvE,QAEF,IAAVkF,GAAgBC,GAAeC,EAAS,mBAC5C7C,EAAQxC,EACRmF,EAASE,EAAQ,UACbA,EAAQ,eAAmBjE,SAAS2D,EAAY,UAAgB,UAChEM,EAAQ,eAAmBhE,KAAK0D,EAAY,UAAgB,SAEhE7D,EAAIsD,EAAYvE,QAGxB,IAAa,GAAVuC,EAAY,CACX,IAAI8C,EAAU,GACD,IAAVH,IACCA,EAAS/C,KAAK6C,mBAAmBjB,IAGrCsB,EAAO,UAAgBH,EACvBG,EAAQ,iBAAmBF,EAC3BE,EAAO,eAAqB,CAACP,EAAY,UAAgB,SACzDP,EAAYnD,KAAKiE,GAErBjB,EAAce,GAAeD,EACzBnB,EAAc5C,SAAS+D,IACvBnB,EAAc3C,KAAK8D,GAGvBJ,EAAaX,EAAOQ,EAAuBM,EAAgBlF,IAAM,IAAMmF,EAAS,QAChFH,EAASJ,EAAuBM,EAAgBlF,KAAOmF,EAS/D,IALA,IAAII,EAAc,GACdC,EAAgB,GAChBC,EAAS,GACTC,GAAa,EACbC,EAAU,GACN3F,EAAI,EAAGA,EAAImE,EAAQlE,OAAQD,IAAI,CAKnC,IAJA,IACI4F,EAAiB,GACjBC,EAAO,GACPC,EAAU3B,EAAQnE,GACdkB,EAAI,EAAGA,EAAIuD,EAASxE,OAAQiB,IAAI,CACpC,IAEI6E,EAAgBtB,EAASvD,GAGzB8E,EAAYF,EAAQC,GAGxB,IAA8B,GAA3BC,EAAUpD,QAAQ,KAAW,CAC5BiD,EAAOG,EACPN,EAAYK,EACZN,EAAOpE,KAAK2E,GACZ,IAAIC,EAAMJ,EAAKK,MAAM,KAAK,GAAGpB,OACzBzB,EAAMwC,EAAKK,MAAM,KAAK,GAAGpB,OACzBqB,EAAM/D,KAAK6C,mBAAmBjB,GAC/BK,EAAcnB,eAAe+C,KAC5BE,EAAM9B,EAAc4B,IAEK,IAA1BH,EAAQJ,EAAY,KACnBS,EAAML,EAAQJ,EAAU,IAI5BhF,EAASW,KAAK,CAAC,UAAY8E,EAAK,aAAeF,IAC/C5B,EAAc4B,GAAOE,EAEjBnC,EAAc5C,SAAS+E,IACvBnC,EAAc3C,KAAK8E,GAEvBR,EAAQQ,EAAM,SAAW9C,EACzByC,EAAQJ,EAAU,GAAKS,MAIM,IAA1BL,EAAQC,KACPH,EAAexB,EAAO2B,IAAkBD,EAAQC,IAQ5D,GAHGnB,EAAuB1B,eAAe,eAAkE,IAAjD4C,EAAQlB,EAAsB,cACpFgB,EAAc,UAAgBE,EAAQlB,EAAsB,aAEvB,GAAtC3D,OAAOD,KAAK4E,GAAgB3F,OAAY,CAGvC,IAFA,IAAIkG,EAAM/D,KAAK6C,mBAAmBjB,GAC9BoC,EAAUnF,OAAOD,KAAK4E,GAClB5F,EAAI,EAAGA,EAAIoG,EAAQnG,OAAQD,IAAI,CACnC,IAAIqD,EAAM+C,EAAQpG,GACfqE,EAAcnB,eAAe0C,EAAevC,MAC3C8C,EAAM9B,EAAcuB,EAAevC,KAIxCuC,EAAe1C,eAAe,eAC7BiD,EAAMP,EAAc,WAEpB5B,EAAc5C,SAAS+E,IACvBnC,EAAc3C,KAAK8E,GAEvBP,EAAc,UAAgBO,EAC9BX,EAAcnE,KAAK8E,EAAM,SACzB,IAAI,IAAInG,EAAI,EAAGA,EAAIoG,EAAQnG,OAAQD,IAAI,CAEnCqE,EAAcuB,EADJQ,EAAQpG,KACmBmG,EAEzCZ,EAAYlE,KAAKuE,GACjBzB,EAAQnE,GAAG4E,EAAsB,YAAkBuB,GAK3D,GAAyB,GAAtBZ,EAAYtF,QAAgBwF,EAAOxF,OAAS,EAC3C8E,EAAaX,EAAOsB,IAAcC,MAElC,CAC2B,GAAxBH,EAAcvF,SACb8E,EAAY,cAAoBS,GAEpC,IAAI,IAAIxF,EAAI,EAAGA,EAAIuF,EAAYtF,OAAQD,IAAI,CACvC,IAAI4F,EAAiBL,EAAYvF,GACjC4F,EAAexB,EAAOsB,IAAcC,EAEpCjF,EAASW,KAAKuE,IAkBtB,MAbsD,IAAnDzB,EAAQ,GAAGS,EAAsB,YAChCG,EAAY,UAAgB3C,KAAK6C,mBAAmBjB,GACjDK,EAAcnB,eAAe6B,EAAaX,EAAOE,OAChDS,EAAY,UAAgBV,EAAcU,EAAaX,EAAOE,MAElEH,EAAQ,GAAGS,EAAsB,WAAiBG,EAAY,UAC9DV,EAAcU,EAAaX,EAAOE,KAAuBS,EAAY,YAGrEA,EAAY,UAAgBZ,EAAQ,GAAGS,EAAsB,WAC7DP,EAAcU,EAAaX,EAAOE,KAAuBS,EAAY,WAEzErE,EAASW,KAAK0D,GACPZ,I,iCAKAkC,GACTA,EAAUA,EAAQvB,OAElB,IADA,IAAIrB,EAAM,IACqB,GAAzB4C,EAAQzD,QAAQ,MAAY,CAC9B,IAAI0D,EAAS,GACgB,KAA1BD,EAAQnG,UAAU,EAAE,IAEnBoG,GADAD,EAAUA,EAAQnG,UAAU,IACXA,UAAU,EAAImG,EAAQzD,QAAQ,MAE/CyD,GADAA,EAAUA,EAAQnG,UAAUmG,EAAQzD,QAAQ,KAAQ,IAClC1C,UAAUmG,EAAQzD,QAAQ,KAAK,KAGjD0D,EAASD,EAAQnG,UAAU,EAAGmG,EAAQzD,QAAQ,MAC9CyD,EAAUA,EAAQnG,UAAUmG,EAAQzD,QAAQ,KAAO,IAEvDa,EAAIpC,KAAKiF,GAOb,OAHE7C,EAAIpC,KAAKgF,GAGH5C,I,sCAGMU,EAASC,EAAQmC,EAAaC,GAG5C,IAFA,IAAId,GAAa,EACbjB,EAAW,GACPzE,EAAI,EAAGA,EAAImE,EAAQlE,OAAQD,IAE/B,IADA,IAAImD,EAAUgB,EAAQnE,GACdkB,EAAI,EAAGA,EAAIiC,EAAQlD,OAAQiB,IAChB,IAAZiC,EAAQjC,KACHuD,EAASrD,SAASF,IAClBuD,EAASpD,KAAKH,IAEa,GAA5BiC,EAAQjC,GAAG0B,QAAQ,OACd2D,EAAYnF,SAASF,IACrBqF,EAAYlF,KAAKH,GAErBwE,EAAYxE,IAK5B,IAAI,IAAIlB,EAAI,EAAGA,EAAIyE,EAASxE,OAAQD,IAC7ByE,EAASzE,IAAM0F,GAAajB,EAASzE,GAAKwG,EAAS,IAA6B,aAAvBpC,EAAOK,EAASzE,MACxEwG,EAAS,GAAK/B,EAASzE,GACvBwG,EAAS,GAAKpC,EAAOK,EAASzE,O,oCAO1BQ,GAoBZ,IAbA,IAAIiG,EAAgB,EAChBtC,EAAU,GACV5B,GAAQ,EACRmE,GAAc,EACdtC,EAAS,GACTmC,EAAc,GACdI,EAAW,GACXhC,EAAmB,GACnB6B,EAAW,GACXI,GAAiB,EACjBC,GAAkB,EAClBC,EAAQtG,EAAK0F,MAAM,MAEfa,EAAI,EAAGA,EAAID,EAAM7G,OAAQ8G,IAAI,CACjC,IAAIC,EAAOF,EAAMC,GAGbtD,EAAMrB,KAAK6E,WAAWD,EAAM,KAChC,GAAGzE,EAAM,CACL6B,EAASX,EACTlB,GAAQ,EACR,IAAI,IAAIvC,EAAI,EAAGA,EAAIyD,EAAIxD,OAAQD,IACd,iBAAVyD,EAAIzD,KACHyG,EAAgBzG,IAEY,GAA7ByD,EAAIzD,GAAG4C,QAAQ,UACd2D,EAAYlF,KAAKrB,IAEmB,GAAhCyD,EAAIzD,GAAG4C,QAAQ,cACnB+B,EAAiBtD,KAAKrB,GACtB2G,EAAStF,KAAKoC,EAAIzD,MAGI,GAAnB6G,GAAkC,IAAVpD,EAAIzD,KAC3BuG,EAAYlF,KAAKrB,GACjB6G,EAAiB7G,GAK7B4G,EAAgBnD,EAAIxD,OACpBuG,EAASnF,KAAKoC,EAAIxD,QAClBuG,EAASnF,KAAK,SAEVqF,EACqB,IAAtBjD,EAAIgD,GACHtC,EAAQ9C,KAAKoC,GAGbrB,KAAK8E,gBAAgB/C,EAASC,EAAQmC,EAAaC,IAIvDrC,EAAQ9C,KAAKoC,GACbiD,GAAc,GAGtBtE,KAAK8E,gBAAgB/C,EAASC,EAAQmC,EAAaC,GAC/CD,EAAYnF,SAASoF,EAAS,KAAOA,EAAS,IAAMI,GACpDL,EAAYlF,KAAKmF,EAAS,IAG9B,IADA,IAAIW,EAAgB,GACZnH,EAAI,EAAGA,EAAIuG,EAAYtG,OAAQD,IAAI,CAEvC,IADA,IAAIwC,GAAQ,EACJtB,EAAI,EAAGA,EAAIyD,EAAiB1E,OAAQiB,IACrCqF,EAAYvG,IAAM2E,EAAiBzD,GAAK,IACvCsB,GAAQ,GAGJ,GAATA,GACC2E,EAAc9F,KAAKkF,EAAYvG,IAKvCmH,EAAcC,MAAK,SAASxD,EAAGyD,GAAG,OAAOA,EAAIzD,KAC7C,IAAI0D,EAAS,GACb/E,GAAQ,EACR,IAAIgF,EAAsB,GAC1BT,EAAQtG,EAAK0F,MAAM,MACnB,IAAK,IAAIa,EAAI,EAAGA,EAAID,EAAM7G,OAAQ8G,IAAK,CACnC,IACItD,EADOqD,EAAMC,GACFb,MAAM,KACrB,GAAY,GAAT3D,EAAc,CAEb,IADA,IAAIiF,EAAU/D,EAAIoD,GACV7G,EAAI,EAAGA,EAAImH,EAAclH,OAAQD,IACrCyD,EAAIhB,OAAO0E,EAAcnH,GAAG,EAAE,aAElCsH,GAAW7D,EAAId,KAAI,SAASpC,GAC1B,OAA0B,GAAvBA,EAAMqC,QAAQ,KACN,IAAOrC,EAAQ,IAGfA,KAEVsC,KAAK,KACRN,GAAQ,EACR,IAAI,IAAIvC,EAAI,EAAGA,EAAIyD,EAAIxD,OAAQD,IACxByD,EAAIzD,GAAGoB,SAAS,cAAgBpB,GAAKyD,EAAIxD,OAAS,IAC9CwD,EAAIzD,EAAE,IAAMwH,EACXD,EAAoBvH,GAAK,YAErByD,EAAIzD,EAAE,IAAMwG,EAAS,GACzBe,EAAoBvH,GAAK,aAGzBuH,EAAoBvH,GAAKyD,EAAIzD,EAAE,QAK3C,CACA,IAAI,IAAIA,EAAI,EAAGA,EAAImH,EAAclH,OAAQD,IACrCyD,EAAIhB,OAAO0E,EAAcnH,GAAG,EAAE,IAElCsH,GAAW,KACXA,GAAW7D,EAAId,KAAI,SAASpC,GAC1B,OAA0B,GAAvBA,EAAMqC,QAAQ,KACN,IAAOrC,EAAQ,IAGfA,KAEZsC,KAAK,MAKd,OADAT,KAAKvE,MAAM2C,KAAO8G,EACXC,I,+BAGA/G,GAiBP,IAhBA,IAAIE,EAAW,GACX8D,EAAc,GAGdR,EAAgB/E,KAAK0B,MADX,MAEV8F,EAAgB,EAChBtC,EAAU,GACVI,EAAkBnC,KAAKqF,cAAcjH,GAErCjC,EAAc,GAEdgE,GAAQ,EACRmE,GAAc,EACdtC,EAAS,GACTC,EAAgBpF,KAAK0B,MAZN,MAafmG,EAAQ1E,KAAKvE,MAAM2C,KAAK0F,MAAM,MACzBa,EAAI,EAAGA,EAAID,EAAM7G,OAAQ8G,IAAI,CAElC,IAAIC,EAAOF,EAAMC,GACbtD,EAAMrB,KAAK6E,WAAWD,EAAM,KAChC,GAAGzE,EAAM,CACL6B,EAASX,EACTlB,GAAQ,EACR,IAAI,IAAIvC,EAAI,EAAGA,EAAIyD,EAAIxD,OAAQD,IACd,iBAAVyD,EAAIzD,KACHyG,EAAgBzG,GAGxBzB,EAAY8C,KAAK,CAACoC,SAEjB,GAAGiD,EACJ,GAAyB,IAAtBjD,EAAIgD,GACHtC,EAAQ9C,KAAKoC,OAEb,CACA,IAAIC,EAAWtB,KAAKsF,eAAevD,EAASC,EAAQC,EAAeoC,EAAezC,EAAeO,EAAiBC,EAAa9D,GAC/HnC,EAAY8C,KAAKqC,GACjBS,EAAU,CAACV,GACXiD,GAAc,OAIlBvC,EAAQ9C,KAAKoC,GACbiD,GAAc,EAGtB,IAAIhD,EAAWtB,KAAKsF,eAAevD,EAASC,EAAQC,EAAeoC,EAAezC,EAAeO,EAAiBC,EAAa9D,GAC/HnC,EAAY8C,KAAKqC,GACjB,IAAI,IAAI1D,EAAI,EAAGA,EAAIwE,EAAYvE,OAAQD,IACnCU,EAASW,KAAKmD,EAAYxE,IAI9B,IADA,IAAI2H,EAAU,GACN3H,EAAE,EAAGA,EAAIzB,EAAY0B,OAAQD,IAEjC,IADA,IAAImE,EAAU5F,EAAYyB,GAClBkB,EAAI,EAAGA,EAAIiD,EAAQlE,OAAQiB,IAAI,CACzBiD,EAAQjD,GAClByG,GAAWxD,EAAQjD,GAAGyB,KAAI,SAASpC,GAC/B,OAA0B,GAAvBA,EAAMqC,QAAQ,KACN,IAAOrC,EAAQ,IAGfA,KAEZsC,KAAK,KACL7C,GAAGzB,EAAY0B,OAAO,GAAKiB,GAAGiD,EAAQlE,OAAQ,IAC7C0H,GAAW,MAIvBvF,KAAKjD,SAAS,CAACZ,YAAYoJ,IAE3B,IADA,IACQ3H,EAAI,EAAGA,EAAIU,EAAST,OAAQD,IACtBf,KAAKC,UAAUwB,EAASV,GAAI,KAAM,QAAU,KAG1D,OAAOU,I,+BA4DE,IAAD,OACN,OACE,yBAAKkH,UAAU,MAAMC,MAAO,CAAC,aAAa,SACxC,4BAAQD,UAAU,aAAaC,MAAS,CAAC,YAAY,OAAQ,cAAc,OAAQ,iBAAiB,SAClG,4CACA,2BAAOrJ,KAAK,OACLsJ,GAAG,OACHF,UAAU,aACVG,OAAO,OACPC,SAAU,SAAArK,GAAC,OAAE,EAAK8B,iBAAiB9B,EAAE2C,OAAO2H,MAAM,OAEzD,yBAAKJ,MAAS,CAAC,aAAa,WACxB,yCACA,oFACA,8HAGJ,yBAAKA,MAAS,CAAC,eAAgB,OAAQ,gBAAgB,SAClDzF,KAAKvE,MAAMuB,WAAWuD,KAAI,SAAAuF,GAAC,OAAK,2BAAIjJ,KAAKC,UAAUgJ,EAAG,KAAM,KAAKhC,MAAM,MAAMvD,KAAI,SAACwF,GACjF,OACE,0BAAMN,MAAS,CAAC,eAAe,EAAKhI,aAAasI,KAChD,EAAKhI,cAAcgI,GACpB,sCAMR,6BACA,6BACA,4CACA,4FACA,6BACE,8BACI5H,MAAO6B,KAAKvE,MAAM2B,cAClBwI,SAAU5F,KAAKhC,aACfgI,KAAM,GACNC,KAAM,MAGZ,4BAAQ7J,KAAK,SAAS8J,QAASlG,KAAK/C,qBAApC,kB,GAj+BQkJ,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASjH,MACvB,2DCZNkH,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5K,SAAS6K,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzK,QAAQyK,MAAMA,EAAMC,c","file":"static/js/main.c13f77e4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={\n      JSONoutput: [],\n      fileReader:'',\n      data: '',\n      excelOutput:'',\n      textAreaValue:'',\n    }\n    \n  }\n\nreverseRead(jsonString){\n    \n    let jsonList = JSON.parse(jsonString)\n    let jsonIndex = {}\n    for(let i = 0; i < jsonList.length; i++){\n        let currJSON = jsonList[i]\n        jsonIndex[currJSON['conceptId']] = i\n    }\n    \n    let referenced = [];\n    let clean = [];\n    for(let i = 0; i < jsonList.length; i++){\n        let currFile = jsonList[i];\n        let keys = Object.keys(currFile);\n        for(let j = 0; j < keys.length; j++){\n            let nextObj = currFile[keys[j]]\n            if(keys[j].includes('Source')){\n                if(!clean.includes(i)){\n                    clean.push(i)\n                }\n            }\n            if(Array.isArray(nextObj)){\n                //iterate through array and look for json\n                let toReplace = []\n                for(let k = 0; k < nextObj.length; k++){\n                    let toCheck = nextObj[k]\n                    \n                    if(toCheck.match(/[0-9]{9}.json/) != null){\n                        let cId = toCheck.substring(0,9);\n                        toReplace.push(jsonList[jsonIndex[cId]])\n                        if(!referenced.includes(jsonIndex[cId])){\n                            referenced.push(jsonIndex[cId])\n                        }\n                    }\n                    \n                }\n                if(toReplace.length > 0){\n                    currFile[keys[j]] = toReplace;\n                }\n            }\n            else if(typeof nextObj == 'string'){\n                if(nextObj.match(/[0-9]{9}.json/) != null){\n                    let cId = nextObj.substring(0,9);\n                    currFile[keys[j]] = jsonList[jsonIndex[cId]];\n                    if(!referenced.includes(jsonIndex[cId])){\n                        referenced.push(jsonIndex[cId])\n                    }\n                }\n                //check if string is JSON\n            }\n            else{\n                let currKeys = Object.keys(nextObj)\n                let toReplace = {};\n                for(let k = 0; k < currKeys.length; k++){\n                    if(currKeys[k].match(/[0-9]{9}.json/)){\n                        let cId = currKeys[k].substring(0,9);\n                        toReplace[nextObj[currKeys[k]]] = jsonList[jsonIndex[cId]];\n                        if(!referenced.includes(jsonIndex[cId])){\n                            referenced.push(jsonIndex[cId])\n                        }\n                    }\n                }\n                if(Object.keys(nextObj).length > 0){\n                    currFile[keys[j]] = toReplace;\n                }\n                //check object for JSON\n            }\n        }\n    }\n    for(let i = 0; i < jsonList.length; i++){\n        if(!referenced.includes(i)){\n            if(!clean.includes(i)){\n                clean.push(i)\n            }\n        }\n    }\n\n\n    let finalMatrix = []\n    let finalHeader = []\n    let finalConcepts = []\n    let maxes = []\n    //change to make it recursive\n    for(let i = 0; i < clean.length; i ++){\n        let conceptSeen = [jsonList[clean[i]]['conceptId']]\n        let final = {}\n        this.recurseRead(jsonList[clean[i]],final, '', conceptSeen)\n        finalMatrix.push(final)\n\n        //finalHeader.concat(Object.keys(final)).unique()\n\n\n\n        let keys = Object.keys(final)\n        let finalArr = []\n        let max = 0;\n        for(let j = 0; j < keys.length; j++){\n            if(!finalHeader.includes(keys[j]) && !finalConcepts.includes(keys[j])){\n                if(!keys[j].includes('conceptId')){\n                    if(!keys[j].includes('subcollection') && !keys[j].includes('subcollections')){\n                        finalHeader.push(keys[j])\n                    }\n                }\n                else{\n                    finalConcepts.push(keys[j])\n                }\n            }\n\n            if(final[keys[j]].length > max){\n                max = final[keys[j]].length\n            }\n        }\n\n        maxes.push(max)\n        \n        //console.log(finalArr)\n\n\n    }\n    /*\n    let toExcel = \"\";\n    toExcel += keys.map(function(value){\n        if(value.indexOf(',') != -1){\n            return \"\\\"\" + value + \"\\\"\";\n        }\n        else if(value == '0'){\n            return ''\n        }\n        else{\n            return value;\n        }\n    }).join(\",\");\n    for(let j = 0; j < finalArr.length; j++){\n        toExcel += '\\n'\n        toExcel += finalArr[j].map(function(value){\n            if(value.indexOf(',') != -1){\n                return \"\\\"\" + value + \"\\\"\";\n            }\n            else{\n                return value;\n            }\n        }).join(\",\");\n    }\n    //console.log(toExcel)\n    fs.writeFileSync('testOutput1.csv', toExcel)\n*/\n    //\n    //reorder the finalHeader\n    //console.log(finalConcepts)\n    //try while organizing data: if key == subcollection, use single key from thing\n    let first = false;\n    for(let i = 0; i < finalHeader.length; i++){\n        let found = false;\n        for(let j = 0; j < finalConcepts.length; j++){    \n            if(finalConcepts[j].includes(finalHeader[i])){\n                finalHeader.splice(i,0,finalConcepts[j])\n                i += 1;\n                j = finalConcepts.length\n                found =true\n            }\n        }\n        if(found == false && first == false){\n            finalHeader.splice(i,0,'conceptId')\n            i += 1;\n            first = true;\n        }\n        \n    }\n    //console.log(finalHeader)\n\n\n\n    let toExcel = ''\n    toExcel += finalHeader.map(function(value){\n        if(value.indexOf('conceptId') != -1){\n            return 'conceptId'\n        }\n        if(value.indexOf(',') != -1){\n            return \"\\\"\" + value + \"\\\"\";\n        }\n        else if(value == '0'){\n            return ''\n        }\n        else{\n            return value;\n        }\n    }).join(\",\");\n    //console.log(finalMatrix[1])\n    for(let i =0 ; i < finalMatrix.length; i++){\n       \n        let max = maxes[i]\n        let finalArr = [];\n        let currItem = finalMatrix[i] \n    \n        for(let k = 0; k < max; k++){\n            let toInsert = []\n            for(let j = 0; j < finalHeader.length; j++){\n\n                toInsert.push('')\n\n            }\n            finalArr.push(toInsert);\n        }\n        for(let j = 0; j < finalHeader.length; j++){\n            let currKey = finalHeader[j]\n            \n            if(currItem.hasOwnProperty(currKey)){\n                let currArr = currItem[currKey]\n                if(currKey != '0'){\n                    for(let k = 0; k < currArr.length; k++){\n                        finalArr[k][j] = currArr[k]\n                    }\n                }\n            }\n        }\n        for(let j = 0; j < finalArr.length; j++){\n            toExcel += '\\n'\n            toExcel += finalArr[j].map(function(value){\n                if(value.indexOf(',') != -1){\n                    return \"\\\"\" + value + \"\\\"\";\n                }\n                else{\n                    return value;\n                }\n            }).join(\",\");\n        }\n\n    }    \n        \n    \n\n\n    return toExcel;\n    //console.log(toExcel)\n    //console.log(finalConcepts)\n}\n\nrecurseRead(curr,final, key, conceptSeen, isSource){\n    let keys = Object.keys(curr)\n    let toPrint = []\n\n    if(curr.hasOwnProperty('conceptId') && key != ''){\n        let nextObj = curr['conceptId']\n        if(key == 'subcollections' || key == 'subcollection'){\n            let found = -1;\n            let firstWithoutconceptId = -1;\n            for(let i = 0; i < keys.length; i++){\n                if(final.hasOwnProperty('conceptId' + keys[i]) && keys[i] != '' && keys[i] != 'subcollections'&& keys[i] != 'subcollection' && found == -1){\n                    found = i;\n                }\n                if(!keys[i].includes('conceptId') && firstWithoutconceptId == -1 && keys[i] != 'subcollections'&& keys[i] != 'subcollection'){\n                    firstWithoutconceptId = i\n                }\n            }\n            let toChange = ''\n            if(found == -1){\n                toChange = keys[firstWithoutconceptId]\n            }\n            else{\n                toChange = keys[found]\n            }\n            \n            if(final.hasOwnProperty('conceptId' + toChange)){\n                if(!final['conceptId' + toChange].includes(nextObj)){\n                    final['conceptId' + toChange].push(nextObj)\n                }\n            }\n            else{\n                final['conceptId' + toChange] = [nextObj]\n            }\n        }\n        else{\n            if(final.hasOwnProperty('conceptId' + key)){\n                if(!final['conceptId' + key].includes(nextObj)){\n                    final['conceptId' + key].push(nextObj)\n                }\n            }\n            else{\n                final['conceptId' + key] = [nextObj]\n\n            }\n        }\n    }\n    \n    for(let j = 0; j < keys.length; j++){\n        let nextObj = curr[keys[j]]\n        if(Array.isArray(nextObj)){\n            let arr = []\n            for(let k = 0; k <nextObj.length; k++){\n                if(typeof nextObj[k] != 'string'){\n                    if(!conceptSeen.includes(nextObj[k]['conceptId'])){\n                        conceptSeen.push(nextObj['conceptId'])\n                        if(!key.includes('Source')){\n                            let returned = this.recurseRead(nextObj[k], final, keys[j], conceptSeen)\n                            arr.push(returned)\n                        }\n                    }\n                }\n                else{\n                    //console.log(JSON.stringify(nextObj))\n                }\n                \n            }\n            //console.log(keys[j])\n            //console.log(arr)\n        }\n\n        else if(typeof nextObj == 'string'){\n            if(keys[j] != 'conceptId' && key != 'conceptId'){\n                if(key == '' || key == 'subcollection'){\n                    if(final.hasOwnProperty(keys[j])){\n                        if(!final[keys[j]].includes(nextObj)){\n                            final[keys[j]].push(nextObj)\n                        }\n                    }\n                    else{\n                        final[keys[j]] = [nextObj]\n                    }\n                    //toPrint.push(keys[j] + ':' + nextObj)\n                    //console.log(keys[j] + ': ' + nextObj)\n                }\n                else{\n                    if(final.hasOwnProperty(key)){\n                        if(!final[key].includes(nextObj)){\n                            final[key].push(nextObj)\n                        }\n                        \n                    }\n                    else{\n                        final[key] = [nextObj]\n                    }\n                    //toPrint.push(key + ':' + nextObj)\n                    //console.log(key + ': ' + nextObj)\n                }\n            }\n\n            else if(keys[j] == 'conceptId' && key == ''){\n                if(final.hasOwnProperty('conceptId' + key)){\n                    if(!final['conceptId' + key].includes(nextObj)){\n                        final['conceptId' + key].push(nextObj)\n                    }\n                }\n                else{\n                    final['conceptId' + key] = [nextObj]\n                }\n            }\n        \n        }\n\n\n        else{\n            if(!nextObj.hasOwnProperty('conceptId') || !conceptSeen.includes(nextObj['conceptId'])){\n                if(nextObj.hasOwnProperty('conceptId')){\n                    conceptSeen.push(nextObj['conceptId'])\n                    this.recurseRead(nextObj, final, keys[j], conceptSeen)\n                }\n                else{\n                    let kList = Object.keys(nextObj);\n                    \n                    for(let k = 0; k < kList.length; k++){\n\n                        if(nextObj[kList[k]].hasOwnProperty('variableName') && !nextObj[kList[k]]['variableName'].includes('=')){\n                            nextObj[kList[k]]['variableName'] = kList[k] + '=' + nextObj[kList[k]]['variableName']\n                        }\n                        this.recurseRead(nextObj[kList[k]], final, keys[j], conceptSeen)\n                    }\n                }\n            }\n\n        }\n\n    }\n    //console.log(toPrint)\n\n}\n\n  \ngenerateNine(){\n  let a = ''\n  for(let i = 0; i < 9; i++){\n      let b = Math.floor(Math.random()*10)\n      a += b\n  }\n  return a;\n}\n\ngenerateRandomUUID(conceptIdList){\n  //return uuidv4();\n  let num = this.generateNine()\n  while(!conceptIdList.includes(num)){\n      let num = this.generateNine();\n      return num;\n  }\n}\n\nprocessCluster(cluster, header, nameToConcept, indexVariableName, conceptIdList, conceptIdObject, sourceJSONS, jsonList){\n    let nonEmpty = [];\n    let list = [1,2,3]\n    let conceptIdObjectKeys =Object.keys(conceptIdObject)\n    let conceptIdIndices = [];\n    let generalId = -1;\n    let conceptIdReverseLookup = {};\n    for(let i = 0; i < conceptIdObjectKeys.length; i++){\n        conceptIdIndices.push(parseInt(conceptIdObjectKeys[i]))\n        conceptIdReverseLookup[conceptIdObject[conceptIdObjectKeys[i]]] = parseInt(conceptIdObjectKeys[i])\n    }\n\n    for(let i = 1; i < cluster.length; i++){\n        let currArr = cluster[i]\n        for(let j = 0; j < currArr.length; j++){\n            if(currArr[j].trim()!='' && !conceptIdIndices.includes(j)){\n                if(!nonEmpty.includes(j)){\n                    nonEmpty.push(j)\n                }\n            }\n        }\n    }\n    \n    let firstRowJSON = {}\n    let firstRow = cluster[0]\n    let clump = [];\n    console.log(JSON.stringify(conceptIdObject))\n    for(let i = 0; i < firstRow.length; i++){\n        if(firstRow[i] != \"\" && !nonEmpty.includes(i) || (conceptIdIndices.includes(i) && conceptIdObject[i] ==\"thisRowId\")){\n            firstRowJSON[header[i]] = firstRow[i]\n        }\n    }\n    console.log(JSON.stringify(firstRowJSON))\n    if(!firstRowJSON.hasOwnProperty('conceptId') || firstRowJSON['conceptId'] == ''){\n        if(nameToConcept.hasOwnProperty(firstRow[indexVariableName])){\n            firstRowJSON['conceptId'] = nameToConcept[firstRow[indexVariableName]]\n            if(!conceptIdList.includes(firstRowJSON['conceptId'])){\n                conceptIdList.push(firstRowJSON['conceptId'])\n            }\n        }\n        else{\n             firstRowJSON['conceptId'] = this.generateRandomUUID(conceptIdList);\n             conceptIdList.push(firstRowJSON['conceptId'])\n             nameToConcept[firstRow[indexVariableName]] = firstRowJSON['conceptId']\n        }\n    }\n    firstRow[conceptIdReverseLookup['thisRowId']] = firstRowJSON['conceptId']\n    \n    //find sources first\n    let conceptColNames = Object.keys(conceptIdReverseLookup)\n    for(let i = 0; i < conceptColNames.length; i++){\n        if(conceptColNames[i].indexOf('Source') != -1){\n            let currId = firstRow[conceptIdReverseLookup[conceptColNames[i]]]\n            \n            let currVarName = firstRow[conceptIdReverseLookup[conceptColNames[i]] + 1]\n            \n            if(currId == '' && nameToConcept.hasOwnProperty(currVarName)){\n                currId = nameToConcept[currVarName]\n            }\n\n            let found = -1;\n            for(let j = 0; j < sourceJSONS.length; j++){\n                let currJSON = sourceJSONS[j];\n                if(currId != '' && currJSON['conceptId'] == currId){\n                    found = i;\n                    if(!currJSON['subcollections'].includes(firstRowJSON['conceptId'] + '.json')){\n                        currJSON['subcollections'].push(firstRowJSON['conceptId'] + '.json')\n                    }\n                    j = sourceJSONS.length;\n                }\n                else if(currId == '' && currVarName == currJSON['Variable Name']){\n                    found = i;\n                    currId = currJSON['conceptId'];\n                    if(!currJSON['subcollections'].includes(firstRowJSON['conceptId'] + '.json')){\n                        currJSON['subcollections'].push(firstRowJSON['conceptId'] + '.json')\n                    }\n                    j = sourceJSONS.length\n                }\n            }\n            if(found == -1){\n                let newJSON = {}\n                if(currId == ''){\n                    currId = this.generateRandomUUID(conceptIdList);\n                }\n                \n                newJSON['conceptId'] = currId;\n                newJSON['Variable Name'] = currVarName;\n                newJSON['subcollections'] = [firstRowJSON['conceptId'] + '.json']\n                sourceJSONS.push(newJSON)\n            }\n            nameToConcept[currVarName] = currId\n            if(!conceptIdList.includes(currId)){\n                conceptIdList.push(currId)\n            }\n            \n            firstRowJSON[header[conceptIdReverseLookup[conceptColNames[i]] + 1]] = currId + '.json'\n            firstRow[conceptIdReverseLookup[conceptColNames[i]]] = currId;\n        }\n    }\n\n    let collections = [];\n    let collectionIds = [];\n    let leaves = []\n    let leafIndex = -1;\n    let leafObj = {}\n    for(let i = 0; i < cluster.length; i++){\n        let ids = [];\n        let currCollection = {}\n        let leaf = ''\n        let currRow = cluster[i];\n        for(let j = 0; j < nonEmpty.length; j++){\n            let currObject = {} \n            \n            let nonEmptyIndex = nonEmpty[j];\n\n            \n            let currValue = currRow[nonEmptyIndex]\n            \n           \n            if(currValue.indexOf('=') != -1){\n                leaf = currValue;\n                leafIndex = nonEmptyIndex;\n                leaves.push(currValue)\n                let val = leaf.split('=')[1].trim()\n                let key = leaf.split('=')[0].trim()\n                let cid = this.generateRandomUUID(conceptIdList)\n                if(nameToConcept.hasOwnProperty(val)){\n                    cid = nameToConcept[val]\n                }\n                if(currRow[leafIndex - 1] != ''){\n                    cid = currRow[leafIndex-1];\n                }\n                \n                //fs.writeFileSync(cid + '.json', JSON.stringify({'conceptId':cid, 'variableName':val}));\n                jsonList.push({'conceptId':cid, 'variableName':val})\n                nameToConcept[val] = cid\n                \n                if(!conceptIdList.includes(cid)){\n                    conceptIdList.push(cid)\n                }\n                leafObj[cid + '.json'] = key\n                currRow[leafIndex-1] = cid\n            }\n            \n            else{\n                if(currRow[nonEmptyIndex] != ''){\n                    currCollection[header[nonEmptyIndex]] = currRow[nonEmptyIndex]\n                }\n            }\n            \n        }\n        if(conceptIdReverseLookup.hasOwnProperty('leftMostId') && currRow[conceptIdReverseLookup['leftMostId']] != ''){\n            currCollection['conceptId'] = currRow[conceptIdReverseLookup['leftMostId']]\n        }\n        if(Object.keys(currCollection).length != 0){\n            let cid = this.generateRandomUUID(conceptIdList)\n            let objKeys = Object.keys(currCollection);\n            for(let i = 0; i < objKeys.length; i++){\n                let key = objKeys[i];\n                if(nameToConcept.hasOwnProperty(currCollection[key])){\n                    cid = nameToConcept[currCollection[key]]\n                }\n            }\n            \n            if(currCollection.hasOwnProperty('conceptId')){\n                cid = currCollection['conceptId'];\n            }\n            if(!conceptIdList.includes(cid)){\n                conceptIdList.push(cid);\n            }\n            currCollection['conceptId'] = cid;\n            collectionIds.push(cid + '.json')\n            for(let i = 0; i < objKeys.length; i++){\n                let key = objKeys[i]\n                nameToConcept[currCollection[key]] = cid;\n            }\n            collections.push(currCollection);\n            cluster[i][conceptIdReverseLookup['leftMostId']] = cid;\n            //fs.writeFileSync(cid + '.json', currCollection);\n        }   \n    }\n\n    if(collections.length == 0  && leaves.length > 0){\n        firstRowJSON[header[leafIndex]] = leafObj;\n    }\n    else{\n        if(collectionIds.length != 0){\n            firstRowJSON['subcollection'] = collectionIds;\n        }\n        for(let i = 0; i < collections.length; i++){\n            let currCollection = collections[i]\n            currCollection[header[leafIndex]] = leafObj;\n            //fs.writeFileSync(currCollection['conceptId']+ '.json', JSON.stringify(currCollection));\n            jsonList.push(currCollection)\n\n        }\n    }\n    \n    if(cluster[0][conceptIdReverseLookup['thisRowId']] == ''){\n        firstRowJSON['conceptId'] = this.generateRandomUUID(conceptIdList);\n        if(nameToConcept.hasOwnProperty(firstRowJSON[header[indexVariableName]])){\n            firstRowJSON['conceptId'] = nameToConcept[firstRowJSON[header[indexVariableName]]];\n        }\n        cluster[0][conceptIdReverseLookup['thisRowId']] = firstRowJSON['conceptId']\n        nameToConcept[firstRowJSON[header[indexVariableName]]] = firstRowJSON['conceptId']\n    }\n    else{\n        firstRowJSON['conceptId'] = cluster[0][conceptIdReverseLookup['thisRowId']]\n        nameToConcept[firstRowJSON[header[indexVariableName]]] = firstRowJSON['conceptId']\n    }\n    jsonList.push(firstRowJSON);\n    return cluster;\n\n\n}\n\nCSVToArray(strData){\n  strData = strData.trim()\n  let arr = [];\n  while(strData.indexOf(\",\") != -1 ){\n      let toPush = \"\";\n      if(strData.substring(0,1) == \"\\\"\"){\n          strData = strData.substring(1);\n          toPush = strData.substring(0,  strData.indexOf(\"\\\"\"));    \n          strData = strData.substring(strData.indexOf(\"\\\"\") + 1);    \n          strData = strData.substring(strData.indexOf(',')+1)\n      }\n      else{\n          toPush = strData.substring(0, strData.indexOf(','));\n          strData = strData.substring(strData.indexOf(',') + 1)\n      }\n      arr.push(toPush)\n\n      //let nextQuote = strData.indexOf(\"\\\"\")\n  }\n    arr.push(strData);\n\n  // Return the parsed data.\n  return( arr );\n}\n\nlookForConcepts(cluster, header, idsToInsert, leftMost){\n  let leafIndex = -1;\n  let nonEmpty = [];\n  for(let i = 1; i < cluster.length; i++){\n      let currArr = cluster[i]\n      for(let j = 0; j < currArr.length; j++){\n          if(currArr[j]!=''){\n              if(!nonEmpty.includes(j)){\n                  nonEmpty.push(j)\n              }\n              if(currArr[j].indexOf('=') != -1){\n                  if(!idsToInsert.includes(j)){\n                      idsToInsert.push(j)    \n                  }\n                  leafIndex = j\n              }\n          }\n      }\n  }\n  for(let i = 0; i < nonEmpty.length; i++){\n      if(nonEmpty[i] != leafIndex && nonEmpty[i] < leftMost[0] && header[nonEmpty[i]] != 'conceptId'){\n          leftMost[0] = nonEmpty[i];\n          leftMost[1] = header[nonEmpty[i]]\n      }\n  }\n  //identify which one is the leaf\n\n}\n\ngetConceptIds(data){\n\n  //first, get all columns that require conceptids\n  //next, check if column to the right has concept id\n  //if it does, add to array, if it doesnt, maybe add to file\n  //keywords: source\n  //Look for columns with clusters\n  let varLabelIndex = 0;\n  let cluster = []\n  let first = true;\n  let currCluster = false;\n  let header = [];\n  let idsToInsert = [];\n  let idsFound = []\n  let conceptIdIndices = []\n  let leftMost = []\n  let leftMostStart = -1;\n  let firstNotSource = -1;\n  let lines = data.split('\\n')\n\n  for(let x = 0; x < lines.length; x++){\n      let line = lines[x]\n\n      //let arr = line.split(',');\n      let arr = this.CSVToArray(line, ',')\n      if(first){\n          header = arr;\n          first = false;\n          for(let i = 0; i < arr.length; i++){\n              if(arr[i] == \"Variable Name\"){\n                  varLabelIndex = i;\n              }\n              if(arr[i].indexOf('Source') != -1){\n                  idsToInsert.push(i)\n              }\n              else if(arr[i].indexOf('conceptId') != -1){\n                  conceptIdIndices.push(i)\n                  idsFound.push(arr[i])\n              }\n              else{\n                  if(firstNotSource == -1 && arr[i] != ''){\n                      idsToInsert.push(i)\n                      firstNotSource = i\n                  }\n              }\n              \n          }\n          leftMostStart = arr.length;\n          leftMost.push(arr.length)\n          leftMost.push('')\n      }\n      else if(currCluster){\n          if(arr[varLabelIndex] == ''){\n              cluster.push(arr);\n          }\n          else{\n              this.lookForConcepts(cluster, header, idsToInsert, leftMost)\n          }\n      }\n      else{\n          cluster.push(arr)\n          currCluster = true;\n      }\n  }\n  this.lookForConcepts(cluster, header, idsToInsert, leftMost);\n  if(!idsToInsert.includes(leftMost[0]) && leftMost[0] != leftMostStart){\n      idsToInsert.push(leftMost[0])\n  }\n  let nonIntersects = []\n  for(let i = 0; i < idsToInsert.length; i++){\n      let found = false;\n      for(let j = 0; j < conceptIdIndices.length; j++){\n          if(idsToInsert[i] == conceptIdIndices[j] + 1){\n              found = true;\n          }\n      }\n      if(found == false){\n          nonIntersects.push(idsToInsert[i])\n      }\n  }\n\n  //sorts in descending order\n  nonIntersects.sort(function(a, b){return b - a})\n  let toWrite ='';\n  first = true;\n  let finalConceptIndices = {};\n  lines = data.split('\\n')\n  for (let x = 0; x < lines.length; x ++){\n      let line = lines[x]\n      let arr = line.split(',')\n      if(first == true){\n          let general = arr[firstNotSource]\n          for(let i = 0; i < nonIntersects.length; i++){\n              arr.splice(nonIntersects[i],0,'conceptId')\n          }\n          toWrite += arr.map(function(value){\n            if(value.indexOf(',') != -1){\n                return \"\\\"\" + value + \"\\\"\";\n            }\n            else{\n                return value;\n            }\n          }).join(\",\");\n          first = false;\n          for(let i = 0; i < arr.length; i++){\n              if(arr[i].includes('conceptId') && i != arr.length - 1){\n                  if(arr[i+1] == general){\n                      finalConceptIndices[i] = 'thisRowId'\n                  }\n                  else if(arr[i+1] == leftMost[1]){\n                      finalConceptIndices[i] = 'leftMostId'\n                  }\n                  else{\n                      finalConceptIndices[i] = arr[i+1]\n                  }\n              }\n          }\n      }   \n      else{\n          for(let i = 0; i < nonIntersects.length; i++){\n              arr.splice(nonIntersects[i],0,'')\n          }\n          toWrite += '\\n'\n          toWrite += arr.map(function(value){\n            if(value.indexOf(',') != -1){\n                return \"\\\"\" + value + \"\\\"\";\n            }\n            else{\n                return value;\n            }\n        }).join(\",\");\n      }\n  }\n\n  this.state.data = toWrite;\n  return finalConceptIndices;\n}\n\nreadFile(data){\n  let jsonList = []\n  let sourceJSONS = []\n  let ConceptIndex = '{}'\n  let idIndex = '[]'\n  let conceptIdList = JSON.parse(idIndex)\n  let varLabelIndex = 0;\n  let cluster = []\n  let conceptIdObject = this.getConceptIds(data)\n  \n  let excelOutput = []\n\n  let first = true;\n  let currCluster = false;\n  let header = [];\n  let nameToConcept = JSON.parse(ConceptIndex);\n  let lines = this.state.data.split('\\n')\n  for (let x = 0; x < lines.length; x++){\n      //let arr = line.split(',');\n      let line = lines[x]\n      let arr = this.CSVToArray(line, ',')\n      if(first){\n          header = arr;\n          first = false;\n          for(let i = 0; i < arr.length; i++){\n              if(arr[i] == \"Variable Name\"){\n                  varLabelIndex = i;\n              }\n          }\n          excelOutput.push([arr])\n      }\n      else if(currCluster){\n          if(arr[varLabelIndex] == ''){\n              cluster.push(arr);\n          }\n          else{\n              let returned = this.processCluster(cluster, header, nameToConcept, varLabelIndex, conceptIdList, conceptIdObject, sourceJSONS, jsonList)\n              excelOutput.push(returned)\n              cluster = [arr]\n              currCluster = true;\n          }\n      }\n      else{\n          cluster.push(arr)\n          currCluster = true;\n      }\n  }\n  let returned = this.processCluster(cluster, header, nameToConcept, varLabelIndex, conceptIdList, conceptIdObject, sourceJSONS, jsonList);\n  excelOutput.push(returned)\n  for(let i = 0; i < sourceJSONS.length; i++){\n      jsonList.push(sourceJSONS[i])\n  }\n  \n  let toPrint = '';\n  for(let i=0; i < excelOutput.length; i++){\n      let cluster = excelOutput[i]\n      for(let j = 0; j < cluster.length; j++){\n          let row = cluster[j]\n          toPrint += cluster[j].map(function(value){\n              if(value.indexOf(',') != -1){\n                  return \"\\\"\" + value + \"\\\"\";\n              }\n              else{\n                  return value;\n              }\n          }).join(\",\");\n          if(i!=excelOutput.length-1 || j!=cluster.length -1){\n              toPrint += '\\n'\n          }\n      }\n  }\n  this.setState({excelOutput:toPrint})\n  let toReturn = ''\n  for(let i = 0; i < jsonList.length; i++){\n    toReturn += JSON.stringify(jsonList[i], null, '    ') + '\\n'\n  }\n  //return JSON.stringify(jsonList, null, '\\t');\n  return jsonList\n\n}\n  handleFileRead = (e) => {\n    const content = this.state.fileReader.result;\n    let response = this.readFile(content)\n    const element = document.createElement(\"a\");\n    const file = new Blob([this.state.excelOutput], {type: 'text/plain'});\n    element.href = URL.createObjectURL(file);\n    element.download = \"myFile.csv\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    //element.click();\n    console.log(JSON.stringify(response))\n    this.setState({JSONoutput:response})\n  }\n  \n  handleCreateReverse = (e) => {\n    let output = this.reverseRead(this.state.textAreaValue)\n    //console.log(output)\n    const element = document.createElement(\"a\");\n    const file = new Blob([output], {type: 'text/plain'});\n    element.href = URL.createObjectURL(file);\n    element.download = \"myFile.csv\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    //element.click();\n  }\n\n  handleFileChosen = (file) => {\n    this.state.fileReader = new FileReader();\n    this.state.fileReader.onloadend = this.handleFileRead;\n    this.state.fileReader.readAsText(file);\n  }\n  getNumSpaces=(str) =>{\n    let numStart = 0;\n    for(let i = 0; i < str.length; i++){\n      if(str.substring(i, i+1) == '-'){\n        numStart += 1;\n      }\n      else{\n        return numStart * 16 + 'px'\n      }\n    }\n    return numStart * 16 + 'px';\n  }\n  removeLeading = (str)=>{\n    let numStart = 0;\n    for(let i = 0; i < str.length; i++){\n      if(str.substring(i, i+1) == '-'){\n        numStart += 1;\n      }\n      else{\n        return str.substring(numStart)\n      }\n    }\n    return str.substring(numStart);\n  }\n  handleChange = (event) =>{\n    console.log(this.state.textAreaValue)\n    this.setState({textAreaValue:event.target.value})\n  }\n  render(){\n    return (\n      <div className=\"App\" style={{'text-align':'left'}}>\n        <header className=\"App-header\" style = {{'font-size':'16px', 'padding-top':'50px', 'padding-bottom':'50px'}}>\n          <h2>CSV to JSONS</h2>\n          <input type='file'\n                 id='file'\n                 className='input-file'\n                 accept='.csv'\n                 onChange={e=>this.handleFileChosen(e.target.files[0])}\n          ></input>\n          <div style = {{'text-align':'center'}}>\n              <p>CSV Rules:</p>\n              <p>There must be a Variable Name field in every full row</p>\n              <p>The leaf nodes (final unit of response) is the only row that is allowed to have an equals sign</p>\n          </div>\n          \n          <div style = {{'padding-left': '50px', 'padding-right':'50px'}}>\n              {this.state.JSONoutput.map(s => (<p>{JSON.stringify(s, null, '-').split('\\n').map((item) => {\n                return (\n                  <span style = {{'padding-left':this.getNumSpaces(item)}}>\n                  {this.removeLeading(item)}\n                  <br/>\n                  </span>\n                )\n              })}</p>))\n              /*JSON.stringify(this.state.JSONoutput)*/}\n          </div>\n          <br/>\n          <br/>\n          <h2>JSONS to CSV</h2>\n          <p>Enter a list of JSONS, and we will generate a csv file for it</p>\n          <div>\n            <textarea\n                value={this.state.textAreaValue}\n                onChange={this.handleChange}\n                rows={10}\n                cols={50}\n                />\n          </div>\n          <button type=\"button\" onClick={this.handleCreateReverse}>Convert!</button>\n        </header>\n\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}