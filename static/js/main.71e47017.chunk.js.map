{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","handleFileRead","e","content","state","fileReader","result","response","readFile","element","document","createElement","file","Blob","excelOutput","type","href","URL","createObjectURL","download","body","appendChild","click","setState","JSONoutput","handleFileChosen","FileReader","onloadend","readAsText","getNumSpaces","str","numStart","i","length","substring","removeLeading","data","a","Math","floor","random","conceptIdList","num","this","generateNine","includes","cluster","header","nameToConcept","indexVariableName","conceptIdObject","sourceJSONS","jsonList","nonEmpty","conceptIdObjectKeys","Object","keys","conceptIdIndices","conceptIdReverseLookup","push","parseInt","currArr","j","trim","firstRowJSON","firstRow","hasOwnProperty","generateRandomUUID","conceptColNames","indexOf","currId","currVarName","found","currJSON","newJSON","collections","collectionIds","leaves","leafIndex","leafObj","currCollection","leaf","currRow","nonEmptyIndex","currValue","undefined","console","log","val","split","key","cid","objKeys","strData","arr","toPush","idsToInsert","leftMost","varLabelIndex","first","currCluster","idsFound","leftMostStart","firstNotSource","lines","x","line","CSVToArray","lookForConcepts","nonIntersects","sort","b","toWrite","finalConceptIndices","general","splice","map","value","join","JSON","parse","getConceptIds","returned","processCluster","toPrint","stringify","className","style","id","accept","onChange","target","files","s","item","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,8HColB5BC,G,8DA9kBb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAggBRC,eAAiB,SAACC,GAChB,IAAMC,EAAU,EAAKC,MAAMC,WAAWC,OAClCC,EAAW,EAAKC,SAASL,GACvBM,EAAUC,SAASC,cAAc,KACjCC,EAAO,IAAIC,KAAK,CAAC,EAAKT,MAAMU,aAAc,CAACC,KAAM,eACvDN,EAAQO,KAAOC,IAAIC,gBAAgBN,GACnCH,EAAQU,SAAW,aACnBT,SAASU,KAAKC,YAAYZ,GAC1BA,EAAQa,QACR,EAAKC,SAAS,CAACC,WAAWjB,KA1gBV,EA8gBlBkB,iBAAmB,SAACb,GAClB,EAAKR,MAAMC,WAAa,IAAIqB,WAC5B,EAAKtB,MAAMC,WAAWsB,UAAY,EAAK1B,eACvC,EAAKG,MAAMC,WAAWuB,WAAWhB,IAjhBjB,EAmhBlBiB,aAAa,SAACC,GAEZ,IADA,IAAIC,EAAW,EACPC,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,IAAI,CACjC,GAA4B,KAAzBF,EAAII,UAAUF,EAAGA,EAAE,GAIpB,OAAkB,GAAXD,EAAgB,KAHvBA,GAAY,EAMhB,OAAkB,GAAXA,EAAgB,MA7hBP,EA+hBlBI,cAAgB,SAACL,GAEf,IADA,IAAIC,EAAW,EACPC,EAAI,EAAGA,EAAIF,EAAIG,OAAQD,IAAI,CACjC,GAA4B,KAAzBF,EAAII,UAAUF,EAAGA,EAAE,GAIpB,OAAOF,EAAII,UAAUH,GAHrBA,GAAY,EAMhB,OAAOD,EAAII,UAAUH,IAviBrB,EAAK3B,MAAO,CACVoB,WAAY,GACZnB,WAAW,GACX+B,KAAM,GACNtB,YAAY,IANE,E,2DAclB,IADA,IAAIuB,EAAI,GACAL,EAAI,EAAGA,EAAI,EAAGA,IAAI,CAEtBK,GADQC,KAAKC,MAAoB,GAAdD,KAAKE,UAG5B,OAAOH,I,yCAGUI,GAGjB,IADA,IAAIC,EAAMC,KAAKC,gBACRH,EAAcI,SAASH,IAAK,CAE/B,OADUC,KAAKC,kB,qCAKNE,EAASC,EAAQC,EAAeC,EAAmBR,EAAeS,EAAiBC,EAAaC,GAO7G,IANA,IAAIC,EAAW,GAEXC,EAAqBC,OAAOC,KAAKN,GACjCO,EAAmB,GAEnBC,EAAyB,GACrB1B,EAAI,EAAGA,EAAIsB,EAAoBrB,OAAQD,IAC3CyB,EAAiBE,KAAKC,SAASN,EAAoBtB,KACnD0B,EAAuBR,EAAgBI,EAAoBtB,KAAO4B,SAASN,EAAoBtB,IAEnG,IAAI,IAAIA,EAAI,EAAGA,EAAIc,EAAQb,OAAQD,IAE/B,IADA,IAAI6B,EAAUf,EAAQd,GACd8B,EAAI,EAAGA,EAAID,EAAQ5B,OAAQ6B,IACT,IAAnBD,EAAQC,GAAGC,QAAeN,EAAiBZ,SAASiB,IAC/CT,EAASR,SAASiB,IAClBT,EAASM,KAAKG,GAS9B,IAHA,IAAIE,EAAe,GACfC,EAAWnB,EAAQ,GAEfd,EAAI,EAAGA,EAAIiC,EAAShC,OAAQD,IACd,IAAfiC,EAASjC,IAAaqB,EAASR,SAASb,IAAOyB,EAAiBZ,SAASb,KACxEgC,EAAajB,EAAOf,IAAMiC,EAASjC,IAIvCgC,EAAaE,eAAe,cAA6C,IAA7BF,EAAY,YACrDhB,EAAckB,eAAeD,EAAShB,KACrCe,EAAY,UAAgBhB,EAAciB,EAAShB,IAC/CR,EAAcI,SAASmB,EAAY,YACnCvB,EAAckB,KAAKK,EAAY,aAKlCA,EAAY,UAAgBrB,KAAKwB,mBAAmB1B,GACpDA,EAAckB,KAAKK,EAAY,WAC/BhB,EAAciB,EAAShB,IAAsBe,EAAY,YAGlEC,EAASP,EAAsB,WAAiBM,EAAY,UAI5D,IADA,IAAII,EAAkBb,OAAOC,KAAKE,GAC1B1B,EAAI,EAAGA,EAAIoC,EAAgBnC,OAAQD,IACvC,IAA4C,GAAzCoC,EAAgBpC,GAAGqC,QAAQ,UAAgB,CAC1C,IAAIC,EAASL,EAASP,EAAuBU,EAAgBpC,KAEzDuC,EAAcN,EAASP,EAAuBU,EAAgBpC,IAAM,GAE3D,IAAVsC,GAAgBtB,EAAckB,eAAeK,KAC5CD,EAAStB,EAAcuB,IAI3B,IADA,IAAIC,GAAS,EACLV,EAAI,EAAGA,EAAIX,EAAYlB,OAAQ6B,IAAI,CACvC,IAAIW,EAAWtB,EAAYW,GACd,IAAVQ,GAAgBG,EAAQ,WAAiBH,GACxCE,EAAQxC,EACJyC,EAAQ,eAAmB5B,SAASmB,EAAY,UAAgB,UAChES,EAAQ,eAAmBd,KAAKK,EAAY,UAAgB,SAEhEF,EAAIX,EAAYlB,QAEF,IAAVqC,GAAgBC,GAAeE,EAAS,mBAC5CD,EAAQxC,EACRsC,EAASG,EAAQ,UACbA,EAAQ,eAAmB5B,SAASmB,EAAY,UAAgB,UAChES,EAAQ,eAAmBd,KAAKK,EAAY,UAAgB,SAEhEF,EAAIX,EAAYlB,QAGxB,IAAa,GAAVuC,EAAY,CACX,IAAIE,EAAU,GACD,IAAVJ,IACCA,EAAS3B,KAAKwB,mBAAmB1B,IAGrCiC,EAAO,UAAgBJ,EACvBI,EAAQ,iBAAmBH,EAC3BG,EAAO,eAAqB,CAACV,EAAY,UAAgB,SACzDb,EAAYQ,KAAKe,GAErB1B,EAAcuB,GAAeD,EACzB7B,EAAcI,SAASyB,IACvB7B,EAAckB,KAAKW,GAGvBN,EAAajB,EAAOW,EAAuBU,EAAgBpC,IAAM,IAAMsC,EAAS,QAChFL,EAASP,EAAuBU,EAAgBpC,KAAOsC,EAS/D,IALA,IAAIK,EAAc,GACdC,EAAgB,GAChBC,EAAS,GACTC,GAAa,EACbC,EAAU,GACN/C,EAAI,EAAGA,EAAIc,EAAQb,OAAQD,IAAI,CAKnC,IAJA,IACIgD,EAAiB,GACjBC,EAAO,GACPC,EAAUpC,EAAQd,GACd8B,EAAI,EAAGA,EAAIT,EAASpB,OAAQ6B,IAAI,CACpC,IAGIqB,EAAgB9B,EAASS,GAEzBsB,EAAYF,EAAQC,GACxB,QAAgBE,GAAbD,EACCE,QAAQC,IAAI,cAAgBL,GAC5BI,QAAQC,IAAIlC,GACZiC,QAAQC,IAAIL,EAAQjD,aAEnB,IAA8B,GAA3BmD,EAAUf,QAAQ,KAAW,CACjCY,EAAOG,EACPN,EAAYK,EACZN,EAAOlB,KAAKyB,GACZ,IAAII,EAAMP,EAAKQ,MAAM,KAAK,GAAG1B,OACzB2B,EAAMT,EAAKQ,MAAM,KAAK,GAAG1B,OACzB4B,EAAMhD,KAAKwB,mBAAmB1B,GAC/BO,EAAckB,eAAesB,KAC5BG,EAAM3C,EAAcwC,IAEK,IAA1BN,EAAQJ,EAAY,KACnBa,EAAMT,EAAQJ,EAAU,IAG5B1B,EAASO,KAAK,CAAC,UAAYgC,EAAK,aAAeH,IAC/CxC,EAAcwC,GAAOG,EAEjBlD,EAAcI,SAAS8C,IACvBlD,EAAckB,KAAKgC,GAEvBZ,EAAQY,EAAM,SAAWD,EACzBR,EAAQJ,EAAU,GAAKa,MAIM,IAA1BT,EAAQC,KACPH,EAAejC,EAAOoC,IAAkBD,EAAQC,IAQ5D,GAHGzB,EAAuBQ,eAAe,eAAkE,IAAjDgB,EAAQxB,EAAsB,cACpFsB,EAAc,UAAgBE,EAAQxB,EAAsB,aAEvB,GAAtCH,OAAOC,KAAKwB,GAAgB/C,OAAY,CAGvC,IAFA,IAAI0D,EAAMhD,KAAKwB,mBAAmB1B,GAC9BmD,EAAUrC,OAAOC,KAAKwB,GAClBhD,EAAI,EAAGA,EAAI4D,EAAQ3D,OAAQD,IAAI,CACnC,IAAI0D,EAAME,EAAQ5D,GACfgB,EAAckB,eAAec,EAAeU,MAC3CC,EAAM3C,EAAcgC,EAAeU,KAIxCV,EAAed,eAAe,eAC7ByB,EAAMX,EAAc,WAEpBvC,EAAcI,SAAS8C,IACvBlD,EAAckB,KAAKgC,GAEvBX,EAAc,UAAgBW,EAC9Bf,EAAcjB,KAAKgC,EAAM,SACzB,IAAI,IAAI3D,EAAI,EAAGA,EAAI4D,EAAQ3D,OAAQD,IAAI,CAEnCgB,EAAcgC,EADJY,EAAQ5D,KACmB2D,EAEzChB,EAAYhB,KAAKqB,GACjBlC,EAAQd,GAAG0B,EAAsB,YAAkBiC,GAI3D,GAAyB,GAAtBhB,EAAY1C,QAAgB4C,EAAO5C,OAAS,EAC3C+B,EAAajB,EAAO+B,IAAcC,MAElC,CACAf,EAAY,cAAoBY,EAChC,IAAI,IAAI5C,EAAI,EAAGA,EAAI2C,EAAY1C,OAAQD,IAAI,CACvC,IAAIgD,EAAiBL,EAAY3C,GACjCgD,EAAejC,EAAO+B,IAAcC,EACpC3B,EAASO,KAAKqB,IAkBtB,MAbsD,IAAnDlC,EAAQ,GAAGY,EAAsB,YAChCM,EAAY,UAAgBrB,KAAKwB,mBAAmB1B,GACjDO,EAAckB,eAAeF,EAAajB,EAAOE,OAChDe,EAAY,UAAgBhB,EAAcgB,EAAajB,EAAOE,MAElEH,EAAQ,GAAGY,EAAsB,WAAiBM,EAAY,UAC9DhB,EAAcgB,EAAajB,EAAOE,KAAuBe,EAAY,YAGrEA,EAAY,UAAgBlB,EAAQ,GAAGY,EAAsB,WAC7DV,EAAcgB,EAAajB,EAAOE,KAAuBe,EAAY,WAEzEZ,EAASO,KAAKK,GACPlB,I,iCAIE+C,GAET,IADA,IAAIC,EAAM,IACqB,GAAzBD,EAAQxB,QAAQ,MAAY,CAC9B,IAAI0B,EAAS,GACgB,KAA1BF,EAAQ3D,UAAU,EAAE,IAEnB6D,GADAF,EAAUA,EAAQ3D,UAAU,IACXA,UAAU,EAAI2D,EAAQxB,QAAQ,MAE/CwB,GADAA,EAAUA,EAAQ3D,UAAU2D,EAAQxB,QAAQ,KAAQ,IAClCnC,UAAU2D,EAAQxB,QAAQ,KAAK,KAGjD0B,EAASF,EAAQ3D,UAAU,EAAG2D,EAAQxB,QAAQ,MAC9CwB,EAAUA,EAAQ3D,UAAU2D,EAAQxB,QAAQ,KAAO,IAEvDyB,EAAInC,KAAKoC,GAOb,OAHED,EAAInC,KAAKkC,GAGHC,I,sCAGMhD,EAASC,EAAQiD,EAAaC,GAG5C,IAFA,IAAInB,GAAa,EACbzB,EAAW,GACPrB,EAAI,EAAGA,EAAIc,EAAQb,OAAQD,IAE/B,IADA,IAAI6B,EAAUf,EAAQd,GACd8B,EAAI,EAAGA,EAAID,EAAQ5B,OAAQ6B,IAChB,IAAZD,EAAQC,KACHT,EAASR,SAASiB,IAClBT,EAASM,KAAKG,IAEa,GAA5BD,EAAQC,GAAGO,QAAQ,OACd2B,EAAYnD,SAASiB,IACrBkC,EAAYrC,KAAKG,GAErBgB,EAAYhB,IAK5B,IAAI,IAAI9B,EAAI,EAAGA,EAAIqB,EAASpB,OAAQD,IAC7BqB,EAASrB,IAAM8C,GAAazB,EAASrB,GAAKiE,EAAS,IAA6B,aAAvBlD,EAAOM,EAASrB,MACxEiE,EAAS,GAAK5C,EAASrB,GACvBiE,EAAS,GAAKlD,EAAOM,EAASrB,O,oCAO1BI,GAoBZ,IAbA,IAAI8D,EAAgB,EAChBpD,EAAU,GACVqD,GAAQ,EACRC,GAAc,EACdrD,EAAS,GACTiD,EAAc,GACdK,EAAW,GACX5C,EAAmB,GACnBwC,EAAW,GACXK,GAAiB,EACjBC,GAAkB,EAClBC,EAAQpE,EAAKqD,MAAM,MAEfgB,EAAI,EAAGA,EAAID,EAAMvE,OAAQwE,IAAI,CACjC,IAAIC,EAAOF,EAAMC,GAGbX,EAAMnD,KAAKgE,WAAWD,EAAM,KAChC,GAAGP,EAAM,CACLpD,EAAS+C,EACTK,GAAQ,EACR,IAAI,IAAInE,EAAI,EAAGA,EAAI8D,EAAI7D,OAAQD,IACd,iBAAV8D,EAAI9D,KACHkE,EAAgBlE,IAEY,GAA7B8D,EAAI9D,GAAGqC,QAAQ,UACd2B,EAAYrC,KAAK3B,IAEmB,GAAhC8D,EAAI9D,GAAGqC,QAAQ,cACnBZ,EAAiBE,KAAK3B,GACtBqE,EAAS1C,KAAKmC,EAAI9D,MAGI,GAAnBuE,GAAkC,IAAVT,EAAI9D,KAC3BgE,EAAYrC,KAAK3B,GACjBuE,EAAiBvE,GAK7BsE,EAAgBR,EAAI7D,OACpBgE,EAAStC,KAAKmC,EAAI7D,QAClBgE,EAAStC,KAAK,SAEVyC,EACqB,IAAtBN,EAAII,GACHpD,EAAQa,KAAKmC,GAGbnD,KAAKiE,gBAAgB9D,EAASC,EAAQiD,EAAaC,IAIvDnD,EAAQa,KAAKmC,GACbM,GAAc,GAGtBzD,KAAKiE,gBAAgB9D,EAASC,EAAQiD,EAAaC,GAC/CD,EAAYnD,SAASoD,EAAS,KAAOA,EAAS,IAAMK,GACpDN,EAAYrC,KAAKsC,EAAS,IAG9B,IADA,IAAIY,EAAgB,GACZ7E,EAAI,EAAGA,EAAIgE,EAAY/D,OAAQD,IAAI,CAEvC,IADA,IAAIwC,GAAQ,EACJV,EAAI,EAAGA,EAAIL,EAAiBxB,OAAQ6B,IACrCkC,EAAYhE,IAAMyB,EAAiBK,GAAK,IACvCU,GAAQ,GAGJ,GAATA,GACCqC,EAAclD,KAAKqC,EAAYhE,IAKvC6E,EAAcC,MAAK,SAASzE,EAAG0E,GAAG,OAAOA,EAAI1E,KAC7C,IAAI2E,EAAS,GACbb,GAAQ,EACR,IAAIc,EAAsB,GAC1BT,EAAQpE,EAAKqD,MAAM,MACnB,IAAK,IAAIgB,EAAI,EAAGA,EAAID,EAAMvE,OAAQwE,IAAK,CACnC,IACIX,EADOU,EAAMC,GACFhB,MAAM,KACrB,GAAY,GAATU,EAAc,CAEb,IADA,IAAIe,EAAUpB,EAAIS,GACVvE,EAAI,EAAGA,EAAI6E,EAAc5E,OAAQD,IACrC8D,EAAIqB,OAAON,EAAc7E,GAAG,EAAE,aAElCgF,GAAWlB,EAAIsB,KAAI,SAASC,GAC1B,OAA0B,GAAvBA,EAAMhD,QAAQ,KACN,IAAOgD,EAAQ,IAGfA,KAEVC,KAAK,KACRnB,GAAQ,EACR,IAAI,IAAInE,EAAI,EAAGA,EAAI8D,EAAI7D,OAAQD,IACxB8D,EAAI9D,GAAGa,SAAS,cAAgBb,GAAK8D,EAAI7D,OAAS,IAC9C6D,EAAI9D,EAAE,IAAMkF,EACXD,EAAoBjF,GAAK,YAErB8D,EAAI9D,EAAE,IAAMiE,EAAS,GACzBgB,EAAoBjF,GAAK,aAGzBiF,EAAoBjF,GAAK8D,EAAI9D,EAAE,QAK3C,CACA,IAAI,IAAIA,EAAI,EAAGA,EAAI6E,EAAc5E,OAAQD,IACrC8D,EAAIqB,OAAON,EAAc7E,GAAG,EAAE,IAElCgF,GAAW,KACXA,GAAWlB,EAAIsB,KAAI,SAASC,GAC1B,OAA0B,GAAvBA,EAAMhD,QAAQ,KACN,IAAOgD,EAAQ,IAGfA,KAEZC,KAAK,MAKd,OADA3E,KAAKvC,MAAMgC,KAAO4E,EACXC,I,+BAGA7E,GAiBP,IAhBA,IAAIgB,EAAW,GACXD,EAAc,GAGdV,EAAgB8E,KAAKC,MADX,MAEVtB,EAAgB,EAChBpD,EAAU,GACVI,EAAkBP,KAAK8E,cAAcrF,GAErCtB,EAAc,GAEdqF,GAAQ,EACRC,GAAc,EACdrD,EAAS,GACTC,EAAgBuE,KAAKC,MAZN,MAafhB,EAAQ7D,KAAKvC,MAAMgC,KAAKqD,MAAM,MACzBgB,EAAI,EAAGA,EAAID,EAAMvE,OAAQwE,IAAI,CAElC,IAAIC,EAAOF,EAAMC,GACbX,EAAMnD,KAAKgE,WAAWD,EAAM,KAChC,GAAGP,EAAM,CACLpD,EAAS+C,EACTK,GAAQ,EACR,IAAI,IAAInE,EAAI,EAAGA,EAAI8D,EAAI7D,OAAQD,IACd,iBAAV8D,EAAI9D,KACHkE,EAAgBlE,GAGxBlB,EAAY6C,KAAK,CAACmC,SAEjB,GAAGM,EACJ,GAAyB,IAAtBN,EAAII,GACHpD,EAAQa,KAAKmC,OAEb,CACA,IAAI4B,EAAW/E,KAAKgF,eAAe7E,EAASC,EAAQC,EAAekD,EAAezD,EAAeS,EAAiBC,EAAaC,GAC/HtC,EAAY6C,KAAK+D,GACjB5E,EAAU,CAACgD,GACXM,GAAc,OAIlBtD,EAAQa,KAAKmC,GACbM,GAAc,EAGtB,IAAIsB,EAAW/E,KAAKgF,eAAe7E,EAASC,EAAQC,EAAekD,EAAezD,EAAeS,EAAiBC,EAAaC,GAC/HtC,EAAY6C,KAAK+D,GACjB,IAAI,IAAI1F,EAAI,EAAGA,EAAImB,EAAYlB,OAAQD,IACnCoB,EAASO,KAAKR,EAAYnB,IAI9B,IADA,IAAI4F,EAAU,GACN5F,EAAE,EAAGA,EAAIlB,EAAYmB,OAAQD,IAEjC,IADA,IAAIc,EAAUhC,EAAYkB,GAClB8B,EAAI,EAAGA,EAAIhB,EAAQb,OAAQ6B,IAAI,CACzBhB,EAAQgB,GAClB8D,GAAW9E,EAAQgB,GAAGsD,KAAI,SAASC,GAC/B,OAA0B,GAAvBA,EAAMhD,QAAQ,KACN,IAAOgD,EAAQ,IAGfA,KAEZC,KAAK,KACLtF,GAAGlB,EAAYmB,OAAO,GAAK6B,GAAGhB,EAAQb,OAAQ,IAC7C2F,GAAW,MAIvBjF,KAAKpB,SAAS,CAACT,YAAY8G,IAE3B,IADA,IACQ5F,EAAI,EAAGA,EAAIoB,EAASnB,OAAQD,IACtBuF,KAAKM,UAAUzE,EAASpB,GAAI,KAAM,QAAU,KAG1D,OAAOoB,I,+BA6CE,IAAD,OACN,OACE,yBAAK0E,UAAU,MAAMC,MAAO,CAAC,aAAa,SACxC,4BAAQD,UAAU,aAAaC,MAAS,CAAC,YAAY,OAAQ,cAAc,OAAQ,iBAAiB,SAClG,2BAAOhH,KAAK,OACLiH,GAAG,OACHF,UAAU,aACVG,OAAO,OACPC,SAAU,SAAAhI,GAAC,OAAE,EAAKuB,iBAAiBvB,EAAEiI,OAAOC,MAAM,OAEzD,8BAEA,6BACI,yCACA,6BACA,oFACA,6BACA,6HACA,8BAEJ,6BACKzF,KAAKvC,MAAMoB,WAAW4F,KAAI,SAAAiB,GAAC,OAAK,2BAAId,KAAKM,UAAUQ,EAAG,KAAM,KAAK5C,MAAM,MAAM2B,KAAI,SAACkB,GACjF,OACE,0BAAMP,MAAS,CAAC,eAAe,EAAKlG,aAAayG,KAChD,EAAKnG,cAAcmG,GACpB,4C,GArkBAC,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtI,SAASuI,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnE,QAAQmE,MAAMA,EAAMC,c","file":"static/js/main.71e47017.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={\n      JSONoutput: [],\n      fileReader:'',\n      data: '',\n      excelOutput:'',\n    }\n    \n  }\n\n  \ngenerateNine(){\n  let a = ''\n  for(let i = 0; i < 9; i++){\n      let b = Math.floor(Math.random()*10)\n      a += b\n  }\n  return a;\n}\n\ngenerateRandomUUID(conceptIdList){\n  //return uuidv4();\n  let num = this.generateNine()\n  while(!conceptIdList.includes(num)){\n      let num = this.generateNine();\n      return num;\n  }\n}\n\nprocessCluster(cluster, header, nameToConcept, indexVariableName, conceptIdList, conceptIdObject, sourceJSONS, jsonList){\n  let nonEmpty = [];\n  let list = [1,2,3]\n  let conceptIdObjectKeys =Object.keys(conceptIdObject)\n  let conceptIdIndices = [];\n  let generalId = -1;\n  let conceptIdReverseLookup = {};\n  for(let i = 0; i < conceptIdObjectKeys.length; i++){\n      conceptIdIndices.push(parseInt(conceptIdObjectKeys[i]))\n      conceptIdReverseLookup[conceptIdObject[conceptIdObjectKeys[i]]] = parseInt(conceptIdObjectKeys[i])\n  }\n  for(let i = 1; i < cluster.length; i++){\n      let currArr = cluster[i]\n      for(let j = 0; j < currArr.length; j++){\n          if(currArr[j].trim()!='' && !conceptIdIndices.includes(j)){\n              if(!nonEmpty.includes(j)){\n                  nonEmpty.push(j)\n              }\n          }\n      }\n  }\n  \n  let firstRowJSON = {}\n  let firstRow = cluster[0]\n  let clump = [];\n  for(let i = 0; i < firstRow.length; i++){\n      if(firstRow[i] != \"\" && !nonEmpty.includes(i) && !conceptIdIndices.includes(i)){\n          firstRowJSON[header[i]] = firstRow[i]\n      }\n  }\n\n  if(!firstRowJSON.hasOwnProperty('conceptId') || firstRowJSON['conceptId'] == ''){\n      if(nameToConcept.hasOwnProperty(firstRow[indexVariableName])){\n          firstRowJSON['conceptId'] = nameToConcept[firstRow[indexVariableName]]\n          if(!conceptIdList.includes(firstRowJSON['conceptId'])){\n              conceptIdList.push(firstRowJSON['conceptId'])\n          }\n          \n      }\n      else{\n           firstRowJSON['conceptId'] = this.generateRandomUUID(conceptIdList);\n           conceptIdList.push(firstRowJSON['conceptId'])\n           nameToConcept[firstRow[indexVariableName]] = firstRowJSON['conceptId']\n      }\n  }\n  firstRow[conceptIdReverseLookup['thisRowId']] = firstRowJSON['conceptId']\n  \n  //find sources first\n  let conceptColNames = Object.keys(conceptIdReverseLookup)\n  for(let i = 0; i < conceptColNames.length; i++){\n      if(conceptColNames[i].indexOf('Source') != -1){\n          let currId = firstRow[conceptIdReverseLookup[conceptColNames[i]]]\n          \n          let currVarName = firstRow[conceptIdReverseLookup[conceptColNames[i]] + 1]\n          \n          if(currId == '' && nameToConcept.hasOwnProperty(currVarName)){\n              currId = nameToConcept[currVarName]\n          }\n\n          let found = -1;\n          for(let j = 0; j < sourceJSONS.length; j++){\n              let currJSON = sourceJSONS[j];\n              if(currId != '' && currJSON['conceptId'] == currId){\n                  found = i;\n                  if(!currJSON['subcollections'].includes(firstRowJSON['conceptId'] + '.json')){\n                      currJSON['subcollections'].push(firstRowJSON['conceptId'] + '.json')\n                  }\n                  j = sourceJSONS.length;\n              }\n              else if(currId == '' && currVarName == currJSON['Variable Name']){\n                  found = i;\n                  currId = currJSON['conceptId'];\n                  if(!currJSON['subcollections'].includes(firstRowJSON['conceptId'] + '.json')){\n                      currJSON['subcollections'].push(firstRowJSON['conceptId'] + '.json')\n                  }\n                  j = sourceJSONS.length\n              }\n          }\n          if(found == -1){\n              let newJSON = {}\n              if(currId == ''){\n                  currId = this.generateRandomUUID(conceptIdList);\n              }\n              \n              newJSON['conceptId'] = currId;\n              newJSON['Variable Name'] = currVarName;\n              newJSON['subcollections'] = [firstRowJSON['conceptId'] + '.json']\n              sourceJSONS.push(newJSON)\n          }\n          nameToConcept[currVarName] = currId\n          if(!conceptIdList.includes(currId)){\n              conceptIdList.push(currId)\n          }\n          \n          firstRowJSON[header[conceptIdReverseLookup[conceptColNames[i]] + 1]] = currId + '.json'\n          firstRow[conceptIdReverseLookup[conceptColNames[i]]] = currId;\n      }\n  }\n\n  let collections = [];\n  let collectionIds = [];\n  let leaves = []\n  let leafIndex = -1;\n  let leafObj = {}\n  for(let i = 0; i < cluster.length; i++){\n      let ids = [];\n      let currCollection = {}\n      let leaf = ''\n      let currRow = cluster[i];\n      for(let j = 0; j < nonEmpty.length; j++){\n          let currObject = {} \n          \n          \n          let nonEmptyIndex = nonEmpty[j];\n          \n          let currValue = currRow[nonEmptyIndex]\n          if(currValue == undefined){\n              console.log('undefined: ' + currRow)\n              console.log(nonEmpty)\n              console.log(currRow.length)\n          }\n          else if(currValue.indexOf('=') != -1){\n              leaf = currValue;\n              leafIndex = nonEmptyIndex;\n              leaves.push(currValue)\n              let val = leaf.split('=')[1].trim()\n              let key = leaf.split('=')[0].trim()\n              let cid = this.generateRandomUUID(conceptIdList)\n              if(nameToConcept.hasOwnProperty(val)){\n                  cid = nameToConcept[val]\n              }\n              if(currRow[leafIndex - 1] != ''){\n                  cid = currRow[leafIndex-1];\n              }\n              \n              jsonList.push({'conceptId':cid, 'variableName':val})\n              nameToConcept[val] = cid\n              \n              if(!conceptIdList.includes(cid)){\n                  conceptIdList.push(cid)\n              }\n              leafObj[cid + '.json'] = key\n              currRow[leafIndex-1] = cid\n          }\n          \n          else{\n              if(currRow[nonEmptyIndex] != ''){\n                  currCollection[header[nonEmptyIndex]] = currRow[nonEmptyIndex]\n              }\n          }\n          \n      }\n      if(conceptIdReverseLookup.hasOwnProperty('leftMostId') && currRow[conceptIdReverseLookup['leftMostId']] != ''){\n          currCollection['conceptId'] = currRow[conceptIdReverseLookup['leftMostId']]\n      }\n      if(Object.keys(currCollection).length != 0){\n          let cid = this.generateRandomUUID(conceptIdList)\n          let objKeys = Object.keys(currCollection);\n          for(let i = 0; i < objKeys.length; i++){\n              let key = objKeys[i];\n              if(nameToConcept.hasOwnProperty(currCollection[key])){\n                  cid = nameToConcept[currCollection[key]]\n              }\n          }\n          \n          if(currCollection.hasOwnProperty('conceptId')){\n              cid = currCollection['conceptId'];\n          }\n          if(!conceptIdList.includes(cid)){\n              conceptIdList.push(cid);\n          }\n          currCollection['conceptId'] = cid;\n          collectionIds.push(cid + '.json')\n          for(let i = 0; i < objKeys.length; i++){\n              let key = objKeys[i]\n              nameToConcept[currCollection[key]] = cid;\n          }\n          collections.push(currCollection);\n          cluster[i][conceptIdReverseLookup['leftMostId']] = cid;\n      }   \n  }\n\n  if(collections.length == 0  && leaves.length > 0){\n      firstRowJSON[header[leafIndex]] = leafObj;\n  }\n  else{\n      firstRowJSON['subcollection'] = collectionIds;\n      for(let i = 0; i < collections.length; i++){\n          let currCollection = collections[i]\n          currCollection[header[leafIndex]] = leafObj;\n          jsonList.push(currCollection)\n\n      }\n  }\n  \n  if(cluster[0][conceptIdReverseLookup['thisRowId']] == ''){\n      firstRowJSON['conceptId'] = this.generateRandomUUID(conceptIdList);\n      if(nameToConcept.hasOwnProperty(firstRowJSON[header[indexVariableName]])){\n          firstRowJSON['conceptId'] = nameToConcept[firstRowJSON[header[indexVariableName]]];\n      }\n      cluster[0][conceptIdReverseLookup['thisRowId']] = firstRowJSON['conceptId']\n      nameToConcept[firstRowJSON[header[indexVariableName]]] = firstRowJSON['conceptId']\n  }\n  else{\n      firstRowJSON['conceptId'] = cluster[0][conceptIdReverseLookup['thisRowId']]\n      nameToConcept[firstRowJSON[header[indexVariableName]]] = firstRowJSON['conceptId']\n  }\n  jsonList.push(firstRowJSON);\n  return cluster;\n\n}\n\nCSVToArray(strData){\n  let arr = [];\n  while(strData.indexOf(\",\") != -1 ){\n      let toPush = \"\";\n      if(strData.substring(0,1) == \"\\\"\"){\n          strData = strData.substring(1);\n          toPush = strData.substring(0,  strData.indexOf(\"\\\"\"));    \n          strData = strData.substring(strData.indexOf(\"\\\"\") + 1);    \n          strData = strData.substring(strData.indexOf(',')+1)\n      }\n      else{\n          toPush = strData.substring(0, strData.indexOf(','));\n          strData = strData.substring(strData.indexOf(',') + 1)\n      }\n      arr.push(toPush)\n\n      //let nextQuote = strData.indexOf(\"\\\"\")\n  }\n    arr.push(strData);\n\n  // Return the parsed data.\n  return( arr );\n}\n\nlookForConcepts(cluster, header, idsToInsert, leftMost){\n  let leafIndex = -1;\n  let nonEmpty = [];\n  for(let i = 1; i < cluster.length; i++){\n      let currArr = cluster[i]\n      for(let j = 0; j < currArr.length; j++){\n          if(currArr[j]!=''){\n              if(!nonEmpty.includes(j)){\n                  nonEmpty.push(j)\n              }\n              if(currArr[j].indexOf('=') != -1){\n                  if(!idsToInsert.includes(j)){\n                      idsToInsert.push(j)    \n                  }\n                  leafIndex = j\n              }\n          }\n      }\n  }\n  for(let i = 0; i < nonEmpty.length; i++){\n      if(nonEmpty[i] != leafIndex && nonEmpty[i] < leftMost[0] && header[nonEmpty[i]] != 'conceptId'){\n          leftMost[0] = nonEmpty[i];\n          leftMost[1] = header[nonEmpty[i]]\n      }\n  }\n  //identify which one is the leaf\n\n}\n\ngetConceptIds(data){\n\n  //first, get all columns that require conceptids\n  //next, check if column to the right has concept id\n  //if it does, add to array, if it doesnt, maybe add to file\n  //keywords: source\n  //Look for columns with clusters\n  let varLabelIndex = 0;\n  let cluster = []\n  let first = true;\n  let currCluster = false;\n  let header = [];\n  let idsToInsert = [];\n  let idsFound = []\n  let conceptIdIndices = []\n  let leftMost = []\n  let leftMostStart = -1;\n  let firstNotSource = -1;\n  let lines = data.split('\\n')\n\n  for(let x = 0; x < lines.length; x++){\n      let line = lines[x]\n\n      //let arr = line.split(',');\n      let arr = this.CSVToArray(line, ',')\n      if(first){\n          header = arr;\n          first = false;\n          for(let i = 0; i < arr.length; i++){\n              if(arr[i] == \"Variable Name\"){\n                  varLabelIndex = i;\n              }\n              if(arr[i].indexOf('Source') != -1){\n                  idsToInsert.push(i)\n              }\n              else if(arr[i].indexOf('conceptId') != -1){\n                  conceptIdIndices.push(i)\n                  idsFound.push(arr[i])\n              }\n              else{\n                  if(firstNotSource == -1 && arr[i] != ''){\n                      idsToInsert.push(i)\n                      firstNotSource = i\n                  }\n              }\n              \n          }\n          leftMostStart = arr.length;\n          leftMost.push(arr.length)\n          leftMost.push('')\n      }\n      else if(currCluster){\n          if(arr[varLabelIndex] == ''){\n              cluster.push(arr);\n          }\n          else{\n              this.lookForConcepts(cluster, header, idsToInsert, leftMost)\n          }\n      }\n      else{\n          cluster.push(arr)\n          currCluster = true;\n      }\n  }\n  this.lookForConcepts(cluster, header, idsToInsert, leftMost);\n  if(!idsToInsert.includes(leftMost[0]) && leftMost[0] != leftMostStart){\n      idsToInsert.push(leftMost[0])\n  }\n  let nonIntersects = []\n  for(let i = 0; i < idsToInsert.length; i++){\n      let found = false;\n      for(let j = 0; j < conceptIdIndices.length; j++){\n          if(idsToInsert[i] == conceptIdIndices[j] + 1){\n              found = true;\n          }\n      }\n      if(found == false){\n          nonIntersects.push(idsToInsert[i])\n      }\n  }\n\n  //sorts in descending order\n  nonIntersects.sort(function(a, b){return b - a})\n  let toWrite ='';\n  first = true;\n  let finalConceptIndices = {};\n  lines = data.split('\\n')\n  for (let x = 0; x < lines.length; x ++){\n      let line = lines[x]\n      let arr = line.split(',')\n      if(first == true){\n          let general = arr[firstNotSource]\n          for(let i = 0; i < nonIntersects.length; i++){\n              arr.splice(nonIntersects[i],0,'conceptId')\n          }\n          toWrite += arr.map(function(value){\n            if(value.indexOf(',') != -1){\n                return \"\\\"\" + value + \"\\\"\";\n            }\n            else{\n                return value;\n            }\n          }).join(\",\");\n          first = false;\n          for(let i = 0; i < arr.length; i++){\n              if(arr[i].includes('conceptId') && i != arr.length - 1){\n                  if(arr[i+1] == general){\n                      finalConceptIndices[i] = 'thisRowId'\n                  }\n                  else if(arr[i+1] == leftMost[1]){\n                      finalConceptIndices[i] = 'leftMostId'\n                  }\n                  else{\n                      finalConceptIndices[i] = arr[i+1]\n                  }\n              }\n          }\n      }   \n      else{\n          for(let i = 0; i < nonIntersects.length; i++){\n              arr.splice(nonIntersects[i],0,'')\n          }\n          toWrite += '\\n'\n          toWrite += arr.map(function(value){\n            if(value.indexOf(',') != -1){\n                return \"\\\"\" + value + \"\\\"\";\n            }\n            else{\n                return value;\n            }\n        }).join(\",\");\n      }\n  }\n\n  this.state.data = toWrite;\n  return finalConceptIndices;\n}\n\nreadFile(data){\n  let jsonList = []\n  let sourceJSONS = []\n  let ConceptIndex = '{}'\n  let idIndex = '[]'\n  let conceptIdList = JSON.parse(idIndex)\n  let varLabelIndex = 0;\n  let cluster = []\n  let conceptIdObject = this.getConceptIds(data)\n  \n  let excelOutput = []\n\n  let first = true;\n  let currCluster = false;\n  let header = [];\n  let nameToConcept = JSON.parse(ConceptIndex);\n  let lines = this.state.data.split('\\n')\n  for (let x = 0; x < lines.length; x++){\n      //let arr = line.split(',');\n      let line = lines[x]\n      let arr = this.CSVToArray(line, ',')\n      if(first){\n          header = arr;\n          first = false;\n          for(let i = 0; i < arr.length; i++){\n              if(arr[i] == \"Variable Name\"){\n                  varLabelIndex = i;\n              }\n          }\n          excelOutput.push([arr])\n      }\n      else if(currCluster){\n          if(arr[varLabelIndex] == ''){\n              cluster.push(arr);\n          }\n          else{\n              let returned = this.processCluster(cluster, header, nameToConcept, varLabelIndex, conceptIdList, conceptIdObject, sourceJSONS, jsonList)\n              excelOutput.push(returned)\n              cluster = [arr]\n              currCluster = true;\n          }\n      }\n      else{\n          cluster.push(arr)\n          currCluster = true;\n      }\n  }\n  let returned = this.processCluster(cluster, header, nameToConcept, varLabelIndex, conceptIdList, conceptIdObject, sourceJSONS, jsonList);\n  excelOutput.push(returned)\n  for(let i = 0; i < sourceJSONS.length; i++){\n      jsonList.push(sourceJSONS[i])\n  }\n  \n  let toPrint = '';\n  for(let i=0; i < excelOutput.length; i++){\n      let cluster = excelOutput[i]\n      for(let j = 0; j < cluster.length; j++){\n          let row = cluster[j]\n          toPrint += cluster[j].map(function(value){\n              if(value.indexOf(',') != -1){\n                  return \"\\\"\" + value + \"\\\"\";\n              }\n              else{\n                  return value;\n              }\n          }).join(\",\");\n          if(i!=excelOutput.length-1 || j!=cluster.length -1){\n              toPrint += '\\n'\n          }\n      }\n  }\n  this.setState({excelOutput:toPrint})\n  let toReturn = ''\n  for(let i = 0; i < jsonList.length; i++){\n    toReturn += JSON.stringify(jsonList[i], null, '    ') + '\\n'\n  }\n  //return JSON.stringify(jsonList, null, '\\t');\n  return jsonList\n\n}\n  handleFileRead = (e) => {\n    const content = this.state.fileReader.result;\n    let response = this.readFile(content)\n    const element = document.createElement(\"a\");\n    const file = new Blob([this.state.excelOutput], {type: 'text/plain'});\n    element.href = URL.createObjectURL(file);\n    element.download = \"myFile.csv\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n    this.setState({JSONoutput:response})\n  }\n  \n\n  handleFileChosen = (file) => {\n    this.state.fileReader = new FileReader();\n    this.state.fileReader.onloadend = this.handleFileRead;\n    this.state.fileReader.readAsText(file);\n  }\n  getNumSpaces=(str) =>{\n    let numStart = 0;\n    for(let i = 0; i < str.length; i++){\n      if(str.substring(i, i+1) == '-'){\n        numStart += 1;\n      }\n      else{\n        return numStart * 16 + 'px'\n      }\n    }\n    return numStart * 16 + 'px';\n  }\n  removeLeading = (str)=>{\n    let numStart = 0;\n    for(let i = 0; i < str.length; i++){\n      if(str.substring(i, i+1) == '-'){\n        numStart += 1;\n      }\n      else{\n        return str.substring(numStart)\n      }\n    }\n    return str.substring(numStart);\n  }\n  render(){\n    return (\n      <div className=\"App\" style={{'text-align':'left'}}>\n        <header className=\"App-header\" style = {{'font-size':'16px', 'padding-top':'50px', 'padding-bottom':'50px'}}>\n          <input type='file'\n                 id='file'\n                 className='input-file'\n                 accept='.csv'\n                 onChange={e=>this.handleFileChosen(e.target.files[0])}\n          ></input>\n          <div>\n      </div>\n          <div>\n              <p>CSV Rules:</p>\n              <br/>\n              <p>There must be a Variable Name field in every full row</p>\n              <br/>\n              <p>The leaf nodes (final unit of response) is the only row that is allowed to have an equals sign</p>\n              <br/>\n          </div>\n          <div>\n              {this.state.JSONoutput.map(s => (<p>{JSON.stringify(s, null, '-').split('\\n').map((item) => {\n                return (\n                  <span style = {{'padding-left':this.getNumSpaces(item)}}>\n                  {this.removeLeading(item)}\n                  <br/>\n                  </span>\n                )\n              })}</p>))}\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}