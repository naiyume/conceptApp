{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","JSONoutput","fileReader","data","excelOutput","className","style","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,8HColB5BC,G,8DA9kBb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAO,CACVC,WAAY,GACZC,WAAW,GACXC,KAAM,GACNC,YAAY,IANE,E,qDAmjBhB,OACE,yBAAKC,UAAU,MAAMC,MAAO,CAAC,aAAa,SACxC,4BAAQD,UAAU,aAAaC,MAAS,CAAC,YAAY,OAAQ,cAAc,OAAQ,iBAAiB,SAmBhG,wC,GAzkBMC,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.53cc5140.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={\n      JSONoutput: [],\n      fileReader:'',\n      data: '',\n      excelOutput:'',\n    }\n    \n  }\n\n  /*\ngenerateNine(){\n  let a = ''\n  for(let i = 0; i < 9; i++){\n      let b = Math.floor(Math.random()*10)\n      a += b\n  }\n  return a;\n}\n\ngenerateRandomUUID(conceptIdList){\n  //return uuidv4();\n  let num = this.generateNine()\n  while(!conceptIdList.includes(num)){\n      let num = this.generateNine();\n      return num;\n  }\n}\n\nprocessCluster(cluster, header, nameToConcept, indexVariableName, conceptIdList, conceptIdObject, sourceJSONS, jsonList){\n  let nonEmpty = [];\n  let list = [1,2,3]\n  let conceptIdObjectKeys =Object.keys(conceptIdObject)\n  let conceptIdIndices = [];\n  let generalId = -1;\n  let conceptIdReverseLookup = {};\n  for(let i = 0; i < conceptIdObjectKeys.length; i++){\n      conceptIdIndices.push(parseInt(conceptIdObjectKeys[i]))\n      conceptIdReverseLookup[conceptIdObject[conceptIdObjectKeys[i]]] = parseInt(conceptIdObjectKeys[i])\n  }\n  //console.log(conceptIdReverseLookup)\n  //console.log(conceptIdIndices)\n  for(let i = 1; i < cluster.length; i++){\n      let currArr = cluster[i]\n      for(let j = 0; j < currArr.length; j++){\n          if(currArr[j]!='' && !conceptIdIndices.includes(j)){\n              if(!nonEmpty.includes(j)){\n                  nonEmpty.push(j)\n              }\n          }\n      }\n  }\n  \n  let firstRowJSON = {}\n  let firstRow = cluster[0]\n  let clump = [];\n  for(let i = 0; i < firstRow.length; i++){\n      if(firstRow[i] != \"\" && !nonEmpty.includes(i) && !conceptIdIndices.includes(i)){\n          firstRowJSON[header[i]] = firstRow[i]\n      }\n  }\n  //console.log(JSON.stringify(cluster))\n  if(!firstRowJSON.hasOwnProperty('conceptId') || firstRowJSON['conceptId'] == ''){\n      if(nameToConcept.hasOwnProperty(firstRow[indexVariableName])){\n          firstRowJSON['conceptId'] = nameToConcept[firstRow[indexVariableName]]\n          if(!conceptIdList.includes(firstRowJSON['conceptId'])){\n              conceptIdList.push(firstRowJSON['conceptId'])\n          }\n          \n      }\n      else{\n           firstRowJSON['conceptId'] = this.generateRandomUUID(conceptIdList);\n           conceptIdList.push(firstRowJSON['conceptId'])\n           nameToConcept[firstRow[indexVariableName]] = firstRowJSON['conceptId']\n      }\n  }\n  firstRow[conceptIdReverseLookup['thisRowId']] = firstRowJSON['conceptId']\n  \n  //find sources first\n  let conceptColNames = Object.keys(conceptIdReverseLookup)\n  for(let i = 0; i < conceptColNames.length; i++){\n      if(conceptColNames[i].indexOf('Source') != -1){\n          let currId = firstRow[conceptIdReverseLookup[conceptColNames[i]]]\n          \n          let currVarName = firstRow[conceptIdReverseLookup[conceptColNames[i]] + 1]\n          \n          if(currId == '' && nameToConcept.hasOwnProperty(currVarName)){\n              currId = nameToConcept[currVarName]\n          }\n\n          let found = -1;\n          for(let j = 0; j < sourceJSONS.length; j++){\n              let currJSON = sourceJSONS[j];\n              if(currId != '' && currJSON['conceptId'] == currId){\n                  found = i;\n                  if(!currJSON['subcollections'].includes(firstRowJSON['conceptId'] + '.json')){\n                      currJSON['subcollections'].push(firstRowJSON['conceptId'] + '.json')\n                  }\n                  j = sourceJSONS.length;\n              }\n              else if(currId == '' && currVarName == currJSON['Variable Name']){\n                  found = i;\n                  currId = currJSON['conceptId'];\n                  if(!currJSON['subcollections'].includes(firstRowJSON['conceptId'] + '.json')){\n                      currJSON['subcollections'].push(firstRowJSON['conceptId'] + '.json')\n                  }\n                  j = sourceJSONS.length\n              }\n          }\n          if(found == -1){\n              let newJSON = {}\n              if(currId == ''){\n                  currId = this.generateRandomUUID(conceptIdList);\n              }\n              \n              newJSON['conceptId'] = currId;\n              newJSON['Variable Name'] = currVarName;\n              newJSON['subcollections'] = [firstRowJSON['conceptId'] + '.json']\n              sourceJSONS.push(newJSON)\n          }\n          nameToConcept[currVarName] = currId\n          if(!conceptIdList.includes(currId)){\n              conceptIdList.push(currId)\n          }\n          \n          firstRowJSON[header[conceptIdReverseLookup[conceptColNames[i]] + 1]] = currId + '.json'\n          firstRow[conceptIdReverseLookup[conceptColNames[i]]] = currId;\n      }\n  }\n\n  let collections = [];\n  let collectionIds = [];\n  let leaves = []\n  let leafIndex = -1;\n  let leafObj = {}\n  for(let i = 0; i < cluster.length; i++){\n      let ids = [];\n      let currCollection = {}\n      let leaf = ''\n      let currRow = cluster[i];\n      for(let j = 0; j < nonEmpty.length; j++){\n          let currObject = {} \n          \n          \n          let nonEmptyIndex = nonEmpty[j];\n          \n          let currValue = currRow[nonEmptyIndex]\n          \n          //console.log(currValue)\n          //console.log(JSON.stringify(nonEmpty))\n          //console.log(header)\n          //console.log(currRow)\n          if(currValue.indexOf('=') != -1){\n              leaf = currValue;\n              leafIndex = nonEmptyIndex;\n              leaves.push(currValue)\n              let val = leaf.split('=')[1].trim()\n              let key = leaf.split('=')[0].trim()\n              let cid = this.generateRandomUUID(conceptIdList)\n              if(nameToConcept.hasOwnProperty(val)){\n                  cid = nameToConcept[val]\n              }\n              if(currRow[leafIndex - 1] != ''){\n                  cid = currRow[leafIndex-1];\n              }\n              \n              jsonList.push({'conceptId':cid, 'variableName':val})\n              nameToConcept[val] = cid\n              \n              if(!conceptIdList.includes(cid)){\n                  conceptIdList.push(cid)\n              }\n              leafObj[cid + '.json'] = key\n              currRow[leafIndex-1] = cid\n          }\n          \n          else{\n              if(currRow[nonEmptyIndex] != ''){\n                  currCollection[header[nonEmptyIndex]] = currRow[nonEmptyIndex]\n              }\n          }\n          \n      }\n      if(currRow[conceptIdReverseLookup['leftMostId']] != ''){\n          currCollection['conceptId'] = currRow[conceptIdReverseLookup['leftMostId']]\n      }\n      if(Object.keys(currCollection).length != 0){\n          let cid = this.generateRandomUUID(conceptIdList)\n          let objKeys = Object.keys(currCollection);\n          for(let i = 0; i < objKeys.length; i++){\n              //console.log(key)\n              let key = objKeys[i];\n              if(nameToConcept.hasOwnProperty(currCollection[key])){\n                  cid = nameToConcept[currCollection[key]]\n              }\n          }\n          \n          if(currCollection.hasOwnProperty('conceptId')){\n              cid = currCollection['conceptId'];\n          }\n          if(!conceptIdList.includes(cid)){\n              conceptIdList.push(cid);\n          }\n          currCollection['conceptId'] = cid;\n          collectionIds.push(cid + '.json')\n          for(let i = 0; i < objKeys.length; i++){\n              //console.log(key)\n              let key = objKeys[i]\n              nameToConcept[currCollection[key]] = cid;\n          }\n          collections.push(currCollection);\n          cluster[i][conceptIdReverseLookup['leftMostId']] = cid;\n      }   \n  }\n\n  if(collections.length == 0  && leaves.length > 0){\n      firstRowJSON[header[leafIndex]] = leafObj;\n  }\n  else{\n      firstRowJSON['subcollection'] = collectionIds;\n      for(let i = 0; i < collections.length; i++){\n          let currCollection = collections[i]\n          currCollection[header[leafIndex]] = leafObj;\n          jsonList.push(currCollection)\n\n      }\n  }\n  \n  if(cluster[0][conceptIdReverseLookup['thisRowId']] == ''){\n      firstRowJSON['conceptId'] = this.generateRandomUUID(conceptIdList);\n      if(nameToConcept.hasOwnProperty(firstRowJSON[header[indexVariableName]])){\n          firstRowJSON['conceptId'] = nameToConcept[firstRowJSON[header[indexVariableName]]];\n      }\n      cluster[0][conceptIdReverseLookup['thisRowId']] = firstRowJSON['conceptId']\n      nameToConcept[firstRowJSON[header[indexVariableName]]] = firstRowJSON['conceptId']\n  }\n  else{\n      firstRowJSON['conceptId'] = cluster[0][conceptIdReverseLookup['thisRowId']]\n      nameToConcept[firstRowJSON[header[indexVariableName]]] = firstRowJSON['conceptId']\n  }\n  jsonList.push(firstRowJSON);\n  return cluster;\n\n}\n\nCSVToArray(strData){\n  let arr = [];\n  while(strData.indexOf(\",\") != -1 ){\n      let toPush = \"\";\n      if(strData.substring(0,1) == \"\\\"\"){\n          strData = strData.substring(1);\n          toPush = strData.substring(0,  strData.indexOf(\"\\\"\"));    \n          strData = strData.substring(strData.indexOf(\"\\\"\") + 1);    \n          strData = strData.substring(strData.indexOf(',')+1)\n      }\n      else{\n          toPush = strData.substring(0, strData.indexOf(','));\n          strData = strData.substring(strData.indexOf(',') + 1)\n      }\n      arr.push(toPush)\n\n      //let nextQuote = strData.indexOf(\"\\\"\")\n  }\n  if(strData != \"\"){\n      arr.push(strData);\n  }\n\n  // Return the parsed data.\n  return( arr );\n}\n\nlookForConcepts(cluster, header, idsToInsert, leftMost){\n  //console.log(cluster)\n  let leafIndex = -1;\n  let nonEmpty = [];\n  for(let i = 1; i < cluster.length; i++){\n      let currArr = cluster[i]\n      for(let j = 0; j < currArr.length; j++){\n          if(currArr[j]!=''){\n              if(!nonEmpty.includes(j)){\n                  nonEmpty.push(j)\n              }\n              if(currArr[j].indexOf('=') != -1){\n                  if(!idsToInsert.includes(j)){\n                      idsToInsert.push(j)    \n                  }\n                  leafIndex = j\n              }\n          }\n      }\n  }\n  for(let i = 0; i < nonEmpty.length; i++){\n      if(nonEmpty[i] != leafIndex && nonEmpty[i] < leftMost[0] && header[nonEmpty[i]] != 'conceptId'){\n          leftMost[0] = nonEmpty[i];\n          leftMost[1] = header[nonEmpty[i]]\n      }\n  }\n  //console.log(nonEmpty)\n  //identify which one is the leaf\n\n}\n\ngetConceptIds(data){\n\n  //first, get all columns that require conceptids\n  //next, check if column to the right has concept id\n  //if it does, add to array, if it doesnt, maybe add to file\n  //keywords: source\n  //Look for columns with clusters\n  let varLabelIndex = 0;\n  let cluster = []\n  let first = true;\n  let currCluster = false;\n  let header = [];\n  let idsToInsert = [];\n  let idsFound = []\n  let conceptIdIndices = []\n  let leftMost = []\n  let firstNotSource = -1;\n  let lines = data.split('\\n')\n  //console.log(nameToConcept)\n  for(let x = 0; x < lines.length; x++){\n      let line = lines[x]\n      //console.log(line)\n      //let arr = line.split(',');\n      let arr = this.CSVToArray(line, ',')\n      if(first){\n          //console.log(line)\n          header = arr;\n          first = false;\n          for(let i = 0; i < arr.length; i++){\n              if(arr[i] == \"Variable Name\"){\n                  varLabelIndex = i;\n                  //console.log(varLAbelIndex)\n              }\n              if(arr[i].indexOf('Source') != -1){\n                  idsToInsert.push(i)\n              }\n              else if(arr[i].indexOf('conceptId') != -1){\n                  conceptIdIndices.push(i)\n                  idsFound.push(arr[i])\n              }\n              else{\n                  if(firstNotSource == -1 && arr[i] != ''){\n                      idsToInsert.push(i)\n                      firstNotSource = i\n                  }\n              }\n              \n          }\n          leftMost.push(arr.length)\n          leftMost.push('')\n      }\n      else if(currCluster){\n          if(arr[varLabelIndex] == ''){\n              cluster.push(arr);\n          }\n          else{\n              this.lookForConcepts(cluster, header, idsToInsert, leftMost)\n          }\n      }\n      else{\n          cluster.push(arr)\n          currCluster = true;\n      }\n  }\n  this.lookForConcepts(cluster, header, idsToInsert, leftMost);\n  if(!idsToInsert.includes(leftMost[0])){\n      idsToInsert.push(leftMost[0])\n      //console.log(leftMost[0])\n  }\n  let nonIntersects = []\n  for(let i = 0; i < idsToInsert.length; i++){\n      let found = false;\n      for(let j = 0; j < conceptIdIndices.length; j++){\n          if(idsToInsert[i] == conceptIdIndices[j] + 1){\n              found = true;\n          }\n      }\n      if(found == false){\n          nonIntersects.push(idsToInsert[i])\n      }\n  }\n\n  //sorts in descending order\n  nonIntersects.sort(function(a, b){return b - a})\n  let toWrite ='';\n  first = true;\n  let finalConceptIndices = {};\n  lines = data.split('\\n')\n  for (let x = 0; x < lines.length; x ++){\n      let line = lines[x]\n      let arr = line.split(',')\n      if(first == true){\n          let general = arr[firstNotSource]\n          for(let i = 0; i < nonIntersects.length; i++){\n              arr.splice(nonIntersects[i],0,'conceptId')\n          }\n          toWrite += arr.join(\",\");\n          first = false;\n          for(let i = 0; i < arr.length; i++){\n              if(arr[i].includes('conceptId') && i != arr.length - 1){\n                  if(arr[i+1] == general){\n                      finalConceptIndices[i] = 'thisRowId'\n                  }\n                  else if(arr[i+1] == leftMost[1]){\n                      finalConceptIndices[i] = 'leftMostId'\n                  }\n                  else{\n                      finalConceptIndices[i] = arr[i+1]\n                  }\n              }\n          }\n      }   \n      else{\n          for(let i = 0; i < nonIntersects.length; i++){\n              arr.splice(nonIntersects[i],0,'')\n          }\n          toWrite += '\\n'\n          toWrite += arr.join(\",\");\n      }\n      //console.log(arr)\n  }\n\n  //console.log(toWrite)\n  this.state.data = toWrite;\n  //console.log(JSON.stringify(finalConceptIndices))\n  return finalConceptIndices;\n}\n\nreadFile(data){\n  let jsonList = []\n  let sourceJSONS = []\n  let ConceptIndex = '{}'\n  let idIndex = '[]'\n  //console.log('idIndex: ' + idIndex)\n  let conceptIdList = JSON.parse(idIndex)\n  let varLabelIndex = 0;\n  let cluster = []\n  let conceptIdObject = this.getConceptIds(data)\n  \n  let excelOutput = []\n\n  let first = true;\n  let currCluster = false;\n  let header = [];\n  let nameToConcept = JSON.parse(ConceptIndex);\n  let lines = this.state.data.split('\\n')\n  //console.log(nameToConcept)\n  for (let x = 0; x < lines.length; x++){\n      //console.log(line)\n      //let arr = line.split(',');\n      let line = lines[x]\n      let arr = this.CSVToArray(line, ',')\n      if(first){\n          header = arr;\n          first = false;\n          for(let i = 0; i < arr.length; i++){\n              if(arr[i] == \"Variable Name\"){\n                  varLabelIndex = i;\n              }\n          }\n          excelOutput.push([arr])\n      }\n      else if(currCluster){\n          if(arr[varLabelIndex] == ''){\n              cluster.push(arr);\n          }\n          else{\n              let returned = this.processCluster(cluster, header, nameToConcept, varLabelIndex, conceptIdList, conceptIdObject, sourceJSONS, jsonList)\n              excelOutput.push(returned)\n              cluster = [arr]\n              currCluster = true;\n          }\n      }\n      else{\n          cluster.push(arr)\n          currCluster = true;\n      }\n  }\n  let returned = this.processCluster(cluster, header, nameToConcept, varLabelIndex, conceptIdList, conceptIdObject, sourceJSONS, jsonList);\n  excelOutput.push(returned)\n  for(let i = 0; i < sourceJSONS.length; i++){\n      jsonList.push(sourceJSONS[i])\n  }\n\n  //console.log(excelOutput)\n  \n  let toPrint = '';\n  for(let i=0; i < excelOutput.length; i++){\n      let cluster = excelOutput[i]\n      for(let j = 0; j < cluster.length; j++){\n          let row = cluster[j]\n          toPrint += cluster[j].map(function(value){\n              if(value.indexOf(',') != -1){\n                  return \"\\\"\" + value + \"\\\"\";\n              }\n              else{\n                  return value;\n              }\n          }).join(\",\");\n          //console.log(cluster)\n          if(i!=excelOutput.length-1 || j!=cluster.length -1){\n              toPrint += '\\n'\n          }\n      }\n  }\n  this.setState({excelOutput:toPrint})\n  //console.log(this.state.toPrint)\n  let toReturn = ''\n  for(let i = 0; i < jsonList.length; i++){\n    toReturn += JSON.stringify(jsonList[i], null, '    ') + '\\n'\n  }\n  //return JSON.stringify(jsonList, null, '\\t');\n  return jsonList\n  //console.log(toPrint)\n  //console.log(conceptIdList)\n  \n}\n  handleFileRead = (e) => {\n    const content = this.state.fileReader.result;\n    let response = this.readFile(content)\n    const element = document.createElement(\"a\");\n    const file = new Blob([this.state.excelOutput], {type: 'text/plain'});\n    element.href = URL.createObjectURL(file);\n    element.download = \"myFile.csv\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n    this.setState({JSONoutput:response})\n  }\n  \n\n  handleFileChosen = (file) => {\n    this.state.fileReader = new FileReader();\n    this.state.fileReader.onloadend = this.handleFileRead;\n    this.state.fileReader.readAsText(file);\n  }\n  getNumSpaces=(str) =>{\n    let numStart = 0;\n    for(let i = 0; i < str.length; i++){\n      if(str.substring(i, i+1) == '-'){\n        numStart += 1;\n      }\n      else{\n        return numStart * 16 + 'px'\n      }\n    }\n    return numStart * 16 + 'px';\n  }\n  removeLeading = (str)=>{\n    let numStart = 0;\n    for(let i = 0; i < str.length; i++){\n      if(str.substring(i, i+1) == '-'){\n        numStart += 1;\n      }\n      else{\n        return str.substring(numStart)\n      }\n    }\n    return str.substring(numStart);\n  }*/\n  render(){\n    return (\n      <div className=\"App\" style={{'text-align':'left'}}>\n        <header className=\"App-header\" style = {{'font-size':'16px', 'padding-top':'50px', 'padding-bottom':'50px'}}>\n          {/*<input type='file'\n                 id='file'\n                 className='input-file'\n                 accept='.csv'\n                 onChange={e=>this.handleFileChosen(e.target.files[0])}\n          ></input>\n          <div>\n      </div>\n          <div>\n              {this.state.JSONoutput.map(s => (<p>{JSON.stringify(s, null, '-').split('\\n').map((item) => {\n                return (\n                  <span style = {{'padding-left':this.getNumSpaces(item)}}>\n                  {this.removeLeading(item)}\n                  <br/>\n                  </span>\n                )\n              })}</p>))}\n            </div>*/}\n            <p>ABC</p>\n        </header>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}