{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","handleFileRead","e","content","state","fileReader","result","response","readFile","element","document","createElement","file","Blob","excelOutput","type","href","URL","createObjectURL","download","body","appendChild","click","setState","JSONoutput","handleCreateReverse","output","reverseRead","textAreaValue","console","log","handleFileChosen","FileReader","onloadend","readAsText","getNumSpaces","str","numStart","i","length","substring","removeLeading","handleChange","event","target","value","data","jsonString","Array","prototype","unique","a","this","concat","j","splice","jsonList","JSON","parse","jsonIndex","referenced","clean","currFile","keys","Object","nextObj","includes","push","isArray","toReplace","k","toCheck","match","cId","currKeys","finalMatrix","finalHeader","finalConcepts","maxes","conceptSeen","final","recurseRead","max","first","found","toExcel","map","indexOf","join","finalArr","currItem","toInsert","currKey","hasOwnProperty","currArr","curr","key","isSource","firstWithoutconceptId","toChange","arr","returned","kList","Math","floor","random","conceptIdList","num","generateNine","cluster","header","nameToConcept","indexVariableName","conceptIdObject","sourceJSONS","nonEmpty","conceptIdObjectKeys","conceptIdIndices","conceptIdReverseLookup","parseInt","trim","firstRowJSON","firstRow","generateRandomUUID","conceptColNames","currId","currVarName","currJSON","newJSON","collections","collectionIds","leaves","leafIndex","leafObj","currCollection","leaf","currRow","nonEmptyIndex","currValue","undefined","val","split","cid","objKeys","strData","toPush","idsToInsert","leftMost","varLabelIndex","currCluster","idsFound","leftMostStart","firstNotSource","lines","x","line","CSVToArray","lookForConcepts","nonIntersects","sort","b","toWrite","finalConceptIndices","general","getConceptIds","processCluster","toPrint","stringify","className","style","id","accept","onChange","files","s","item","rows","cols","onClick","React","Component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9bb50c21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={\n      JSONoutput: [],\n      fileReader:'',\n      data: '',\n      excelOutput:'',\n      textAreaValue:'',\n    }\n    \n  }\n\nreverseRead(jsonString){\n    Array.prototype.unique = function() {\n        var a = this.concat();\n        for(var i=0; i<a.length; ++i) {\n            for(var j=i+1; j<a.length; ++j) {\n                if(a[i] === a[j])\n                    a.splice(j--, 1);\n            }\n        }\n    \n        return a;\n    };\n    let jsonList = JSON.parse(jsonString)\n    let jsonIndex = {}\n    for(let i = 0; i < jsonList.length; i++){\n        let currJSON = jsonList[i]\n        jsonIndex[currJSON['conceptId']] = i\n    }\n    \n    let referenced = [];\n    let clean = [];\n    for(let i = 0; i < jsonList.length; i++){\n        let currFile = jsonList[i];\n        let keys = Object.keys(currFile);\n        for(let j = 0; j < keys.length; j++){\n            let nextObj = currFile[keys[j]]\n            if(keys[j].includes('Source')){\n                if(!clean.includes(i)){\n                    clean.push(i)\n                }\n            }\n            if(Array.isArray(nextObj)){\n                //iterate through array and look for json\n                let toReplace = []\n                for(let k = 0; k < nextObj.length; k++){\n                    let toCheck = nextObj[k]\n                    \n                    if(toCheck.match(/[0-9]{9}.json/) != null){\n                        let cId = toCheck.substring(0,9);\n                        toReplace.push(jsonList[jsonIndex[cId]])\n                        if(!referenced.includes(jsonIndex[cId])){\n                            referenced.push(jsonIndex[cId])\n                        }\n                    }\n                    \n                }\n                if(toReplace.length > 0){\n                    currFile[keys[j]] = toReplace;\n                }\n            }\n            else if(typeof nextObj == 'string'){\n                if(nextObj.match(/[0-9]{9}.json/) != null){\n                    let cId = nextObj.substring(0,9);\n                    currFile[keys[j]] = jsonList[jsonIndex[cId]];\n                    if(!referenced.includes(jsonIndex[cId])){\n                        referenced.push(jsonIndex[cId])\n                    }\n                }\n                //check if string is JSON\n            }\n            else{\n                let currKeys = Object.keys(nextObj)\n                let toReplace = {};\n                for(let k = 0; k < currKeys.length; k++){\n                    if(currKeys[k].match(/[0-9]{9}.json/)){\n                        let cId = currKeys[k].substring(0,9);\n                        toReplace[nextObj[currKeys[k]]] = jsonList[jsonIndex[cId]];\n                        if(!referenced.includes(jsonIndex[cId])){\n                            referenced.push(jsonIndex[cId])\n                        }\n                    }\n                }\n                if(Object.keys(nextObj).length > 0){\n                    currFile[keys[j]] = toReplace;\n                }\n                //check object for JSON\n            }\n        }\n    }\n    for(let i = 0; i < jsonList.length; i++){\n        if(!referenced.includes(i)){\n            if(!clean.includes(i)){\n                clean.push(i)\n            }\n        }\n    }\n\n\n    let finalMatrix = []\n    let finalHeader = []\n    let finalConcepts = []\n    let maxes = []\n    //change to make it recursive\n    for(let i = 0; i < clean.length; i ++){\n        let conceptSeen = [jsonList[clean[i]]['conceptId']]\n        let final = {}\n        this.recurseRead(jsonList[clean[i]],final, '', conceptSeen)\n        finalMatrix.push(final)\n\n        //finalHeader.concat(Object.keys(final)).unique()\n\n\n\n        let keys = Object.keys(final)\n        let finalArr = []\n        let max = 0;\n        for(let j = 0; j < keys.length; j++){\n            if(!finalHeader.includes(keys[j]) && !finalConcepts.includes(keys[j])){\n                if(!keys[j].includes('conceptId')){\n                    if(!keys[j].includes('subcollection') && !keys[j].includes('subcollections')){\n                        finalHeader.push(keys[j])\n                    }\n                }\n                else{\n                    finalConcepts.push(keys[j])\n                }\n            }\n\n            if(final[keys[j]].length > max){\n                max = final[keys[j]].length\n            }\n        }\n\n        maxes.push(max)\n        \n        //console.log(finalArr)\n\n\n    }\n    /*\n    let toExcel = \"\";\n    toExcel += keys.map(function(value){\n        if(value.indexOf(',') != -1){\n            return \"\\\"\" + value + \"\\\"\";\n        }\n        else if(value == '0'){\n            return ''\n        }\n        else{\n            return value;\n        }\n    }).join(\",\");\n    for(let j = 0; j < finalArr.length; j++){\n        toExcel += '\\n'\n        toExcel += finalArr[j].map(function(value){\n            if(value.indexOf(',') != -1){\n                return \"\\\"\" + value + \"\\\"\";\n            }\n            else{\n                return value;\n            }\n        }).join(\",\");\n    }\n    //console.log(toExcel)\n    fs.writeFileSync('testOutput1.csv', toExcel)\n*/\n    //\n    //reorder the finalHeader\n    //console.log(finalConcepts)\n    //try while organizing data: if key == subcollection, use single key from thing\n    let first = false;\n    for(let i = 0; i < finalHeader.length; i++){\n        let found = false;\n        for(let j = 0; j < finalConcepts.length; j++){    \n            if(finalConcepts[j].includes(finalHeader[i])){\n                finalHeader.splice(i,0,finalConcepts[j])\n                i += 1;\n                j = finalConcepts.length\n                found =true\n            }\n        }\n        if(found == false && first == false){\n            finalHeader.splice(i,0,'conceptId')\n            i += 1;\n            first = true;\n        }\n        \n    }\n    //console.log(finalHeader)\n\n\n\n    let toExcel = ''\n    toExcel += finalHeader.map(function(value){\n        if(value.indexOf('conceptId') != -1){\n            return 'conceptId'\n        }\n        if(value.indexOf(',') != -1){\n            return \"\\\"\" + value + \"\\\"\";\n        }\n        else if(value == '0'){\n            return ''\n        }\n        else{\n            return value;\n        }\n    }).join(\",\");\n    //console.log(finalMatrix[1])\n    for(let i =0 ; i < finalMatrix.length; i++){\n       \n        let max = maxes[i]\n        let finalArr = [];\n        let currItem = finalMatrix[i] \n    \n        for(let k = 0; k < max; k++){\n            let toInsert = []\n            for(let j = 0; j < finalHeader.length; j++){\n\n                toInsert.push('')\n\n            }\n            finalArr.push(toInsert);\n        }\n        for(let j = 0; j < finalHeader.length; j++){\n            let currKey = finalHeader[j]\n            \n            if(currItem.hasOwnProperty(currKey)){\n                let currArr = currItem[currKey]\n                if(currKey != '0'){\n                    for(let k = 0; k < currArr.length; k++){\n                        finalArr[k][j] = currArr[k]\n                    }\n                }\n            }\n        }\n        for(let j = 0; j < finalArr.length; j++){\n            toExcel += '\\n'\n            toExcel += finalArr[j].map(function(value){\n                if(value.indexOf(',') != -1){\n                    return \"\\\"\" + value + \"\\\"\";\n                }\n                else{\n                    return value;\n                }\n            }).join(\",\");\n        }\n\n    }    \n        \n    \n\n\n    return toExcel;\n    //console.log(toExcel)\n    //console.log(finalConcepts)\n}\n\nrecurseRead(curr,final, key, conceptSeen, isSource){\n    let keys = Object.keys(curr)\n    let toPrint = []\n\n    if(curr.hasOwnProperty('conceptId') && key != ''){\n        let nextObj = curr['conceptId']\n        if(key == 'subcollections' || key == 'subcollection'){\n            let found = -1;\n            let firstWithoutconceptId = -1;\n            for(let i = 0; i < keys.length; i++){\n                if(final.hasOwnProperty('conceptId' + keys[i]) && keys[i] != '' && keys[i] != 'subcollections'&& keys[i] != 'subcollection' && found == -1){\n                    found = i;\n                }\n                if(!keys[i].includes('conceptId') && firstWithoutconceptId == -1 && keys[i] != 'subcollections'&& keys[i] != 'subcollection'){\n                    firstWithoutconceptId = i\n                }\n            }\n            let toChange = ''\n            if(found == -1){\n                toChange = keys[firstWithoutconceptId]\n            }\n            else{\n                toChange = keys[found]\n            }\n            \n            if(final.hasOwnProperty('conceptId' + toChange)){\n                if(!final['conceptId' + toChange].includes(nextObj)){\n                    final['conceptId' + toChange].push(nextObj)\n                }\n            }\n            else{\n                final['conceptId' + toChange] = [nextObj]\n            }\n        }\n        else{\n            if(final.hasOwnProperty('conceptId' + key)){\n                if(!final['conceptId' + key].includes(nextObj)){\n                    final['conceptId' + key].push(nextObj)\n                }\n            }\n            else{\n                final['conceptId' + key] = [nextObj]\n\n            }\n        }\n    }\n    \n    for(let j = 0; j < keys.length; j++){\n        let nextObj = curr[keys[j]]\n        if(Array.isArray(nextObj)){\n            let arr = []\n            for(let k = 0; k <nextObj.length; k++){\n                if(typeof nextObj[k] != 'string'){\n                    if(!conceptSeen.includes(nextObj[k]['conceptId'])){\n                        conceptSeen.push(nextObj['conceptId'])\n                        if(!key.includes('Source')){\n                            let returned = this.recurseRead(nextObj[k], final, keys[j], conceptSeen)\n                            arr.push(returned)\n                        }\n                    }\n                }\n                else{\n                    //console.log(JSON.stringify(nextObj))\n                }\n                \n            }\n            //console.log(keys[j])\n            //console.log(arr)\n        }\n\n        else if(typeof nextObj == 'string'){\n            if(keys[j] != 'conceptId' && key != 'conceptId'){\n                if(key == '' || key == 'subcollection'){\n                    if(final.hasOwnProperty(keys[j])){\n                        if(!final[keys[j]].includes(nextObj)){\n                            final[keys[j]].push(nextObj)\n                        }\n                    }\n                    else{\n                        final[keys[j]] = [nextObj]\n                    }\n                    //toPrint.push(keys[j] + ':' + nextObj)\n                    //console.log(keys[j] + ': ' + nextObj)\n                }\n                else{\n                    if(final.hasOwnProperty(key)){\n                        if(!final[key].includes(nextObj)){\n                            final[key].push(nextObj)\n                        }\n                        \n                    }\n                    else{\n                        final[key] = [nextObj]\n                    }\n                    //toPrint.push(key + ':' + nextObj)\n                    //console.log(key + ': ' + nextObj)\n                }\n            }\n\n            else if(keys[j] == 'conceptId' && key == ''){\n                if(final.hasOwnProperty('conceptId' + key)){\n                    if(!final['conceptId' + key].includes(nextObj)){\n                        final['conceptId' + key].push(nextObj)\n                    }\n                }\n                else{\n                    final['conceptId' + key] = [nextObj]\n                }\n            }\n        \n        }\n\n\n        else{\n            if(!nextObj.hasOwnProperty('conceptId') || !conceptSeen.includes(nextObj['conceptId'])){\n                if(nextObj.hasOwnProperty('conceptId')){\n                    conceptSeen.push(nextObj['conceptId'])\n                    this.recurseRead(nextObj, final, keys[j], conceptSeen)\n                }\n                else{\n                    let kList = Object.keys(nextObj);\n                    \n                    for(let k = 0; k < kList.length; k++){\n\n                        if(nextObj[kList[k]].hasOwnProperty('variableName') && !nextObj[kList[k]]['variableName'].includes('=')){\n                            nextObj[kList[k]]['variableName'] = kList[k] + '=' + nextObj[kList[k]]['variableName']\n                        }\n                        this.recurseRead(nextObj[kList[k]], final, keys[j], conceptSeen)\n                    }\n                }\n            }\n\n        }\n\n    }\n    //console.log(toPrint)\n\n}\n\n  \ngenerateNine(){\n  let a = ''\n  for(let i = 0; i < 9; i++){\n      let b = Math.floor(Math.random()*10)\n      a += b\n  }\n  return a;\n}\n\ngenerateRandomUUID(conceptIdList){\n  //return uuidv4();\n  let num = this.generateNine()\n  while(!conceptIdList.includes(num)){\n      let num = this.generateNine();\n      return num;\n  }\n}\n\nprocessCluster(cluster, header, nameToConcept, indexVariableName, conceptIdList, conceptIdObject, sourceJSONS, jsonList){\n  let nonEmpty = [];\n  let list = [1,2,3]\n  let conceptIdObjectKeys =Object.keys(conceptIdObject)\n  let conceptIdIndices = [];\n  let generalId = -1;\n  let conceptIdReverseLookup = {};\n  for(let i = 0; i < conceptIdObjectKeys.length; i++){\n      conceptIdIndices.push(parseInt(conceptIdObjectKeys[i]))\n      conceptIdReverseLookup[conceptIdObject[conceptIdObjectKeys[i]]] = parseInt(conceptIdObjectKeys[i])\n  }\n  for(let i = 1; i < cluster.length; i++){\n      let currArr = cluster[i]\n      for(let j = 0; j < currArr.length; j++){\n          if(currArr[j].trim()!='' && !conceptIdIndices.includes(j)){\n              if(!nonEmpty.includes(j)){\n                  nonEmpty.push(j)\n              }\n          }\n      }\n  }\n  \n  let firstRowJSON = {}\n  let firstRow = cluster[0]\n  let clump = [];\n  for(let i = 0; i < firstRow.length; i++){\n      if(firstRow[i] != \"\" && !nonEmpty.includes(i) && !conceptIdIndices.includes(i)){\n          firstRowJSON[header[i]] = firstRow[i]\n      }\n  }\n\n  if(!firstRowJSON.hasOwnProperty('conceptId') || firstRowJSON['conceptId'] == ''){\n      if(nameToConcept.hasOwnProperty(firstRow[indexVariableName])){\n          firstRowJSON['conceptId'] = nameToConcept[firstRow[indexVariableName]]\n          if(!conceptIdList.includes(firstRowJSON['conceptId'])){\n              conceptIdList.push(firstRowJSON['conceptId'])\n          }\n          \n      }\n      else{\n           firstRowJSON['conceptId'] = this.generateRandomUUID(conceptIdList);\n           conceptIdList.push(firstRowJSON['conceptId'])\n           nameToConcept[firstRow[indexVariableName]] = firstRowJSON['conceptId']\n      }\n  }\n  firstRow[conceptIdReverseLookup['thisRowId']] = firstRowJSON['conceptId']\n  \n  //find sources first\n  let conceptColNames = Object.keys(conceptIdReverseLookup)\n  for(let i = 0; i < conceptColNames.length; i++){\n      if(conceptColNames[i].indexOf('Source') != -1){\n          let currId = firstRow[conceptIdReverseLookup[conceptColNames[i]]]\n          \n          let currVarName = firstRow[conceptIdReverseLookup[conceptColNames[i]] + 1]\n          \n          if(currId == '' && nameToConcept.hasOwnProperty(currVarName)){\n              currId = nameToConcept[currVarName]\n          }\n\n          let found = -1;\n          for(let j = 0; j < sourceJSONS.length; j++){\n              let currJSON = sourceJSONS[j];\n              if(currId != '' && currJSON['conceptId'] == currId){\n                  found = i;\n                  if(!currJSON['subcollections'].includes(firstRowJSON['conceptId'] + '.json')){\n                      currJSON['subcollections'].push(firstRowJSON['conceptId'] + '.json')\n                  }\n                  j = sourceJSONS.length;\n              }\n              else if(currId == '' && currVarName == currJSON['Variable Name']){\n                  found = i;\n                  currId = currJSON['conceptId'];\n                  if(!currJSON['subcollections'].includes(firstRowJSON['conceptId'] + '.json')){\n                      currJSON['subcollections'].push(firstRowJSON['conceptId'] + '.json')\n                  }\n                  j = sourceJSONS.length\n              }\n          }\n          if(found == -1){\n              let newJSON = {}\n              if(currId == ''){\n                  currId = this.generateRandomUUID(conceptIdList);\n              }\n              \n              newJSON['conceptId'] = currId;\n              newJSON['Variable Name'] = currVarName;\n              newJSON['subcollections'] = [firstRowJSON['conceptId'] + '.json']\n              sourceJSONS.push(newJSON)\n          }\n          nameToConcept[currVarName] = currId\n          if(!conceptIdList.includes(currId)){\n              conceptIdList.push(currId)\n          }\n          \n          firstRowJSON[header[conceptIdReverseLookup[conceptColNames[i]] + 1]] = currId + '.json'\n          firstRow[conceptIdReverseLookup[conceptColNames[i]]] = currId;\n      }\n  }\n\n  let collections = [];\n  let collectionIds = [];\n  let leaves = []\n  let leafIndex = -1;\n  let leafObj = {}\n  for(let i = 0; i < cluster.length; i++){\n      let ids = [];\n      let currCollection = {}\n      let leaf = ''\n      let currRow = cluster[i];\n      for(let j = 0; j < nonEmpty.length; j++){\n          let currObject = {} \n          \n          \n          let nonEmptyIndex = nonEmpty[j];\n          \n          let currValue = currRow[nonEmptyIndex]\n          if(currValue == undefined){\n              console.log('undefined: ' + currRow)\n              console.log(nonEmpty)\n              console.log(currRow.length)\n          }\n          else if(currValue.indexOf('=') != -1){\n              leaf = currValue;\n              leafIndex = nonEmptyIndex;\n              leaves.push(currValue)\n              let val = leaf.split('=')[1].trim()\n              let key = leaf.split('=')[0].trim()\n              let cid = this.generateRandomUUID(conceptIdList)\n              if(nameToConcept.hasOwnProperty(val)){\n                  cid = nameToConcept[val]\n              }\n              if(currRow[leafIndex - 1] != ''){\n                  cid = currRow[leafIndex-1];\n              }\n              \n              jsonList.push({'conceptId':cid, 'variableName':val})\n              nameToConcept[val] = cid\n              \n              if(!conceptIdList.includes(cid)){\n                  conceptIdList.push(cid)\n              }\n              leafObj[cid + '.json'] = key\n              currRow[leafIndex-1] = cid\n          }\n          \n          else{\n              if(currRow[nonEmptyIndex] != ''){\n                  currCollection[header[nonEmptyIndex]] = currRow[nonEmptyIndex]\n              }\n          }\n          \n      }\n      if(conceptIdReverseLookup.hasOwnProperty('leftMostId') && currRow[conceptIdReverseLookup['leftMostId']] != ''){\n          currCollection['conceptId'] = currRow[conceptIdReverseLookup['leftMostId']]\n      }\n      if(Object.keys(currCollection).length != 0){\n          let cid = this.generateRandomUUID(conceptIdList)\n          let objKeys = Object.keys(currCollection);\n          for(let i = 0; i < objKeys.length; i++){\n              let key = objKeys[i];\n              if(nameToConcept.hasOwnProperty(currCollection[key])){\n                  cid = nameToConcept[currCollection[key]]\n              }\n          }\n          \n          if(currCollection.hasOwnProperty('conceptId')){\n              cid = currCollection['conceptId'];\n          }\n          if(!conceptIdList.includes(cid)){\n              conceptIdList.push(cid);\n          }\n          currCollection['conceptId'] = cid;\n          collectionIds.push(cid + '.json')\n          for(let i = 0; i < objKeys.length; i++){\n              let key = objKeys[i]\n              nameToConcept[currCollection[key]] = cid;\n          }\n          collections.push(currCollection);\n          cluster[i][conceptIdReverseLookup['leftMostId']] = cid;\n      }   \n  }\n\n  if(collections.length == 0  && leaves.length > 0){\n      firstRowJSON[header[leafIndex]] = leafObj;\n  }\n  else{\n      if(collectionIds.length > 0){\n        firstRowJSON['subcollection'] = collectionIds;\n      }\n      for(let i = 0; i < collections.length; i++){\n          let currCollection = collections[i]\n          currCollection[header[leafIndex]] = leafObj;\n          jsonList.push(currCollection)\n\n      }\n  }\n  \n  if(cluster[0][conceptIdReverseLookup['thisRowId']] == ''){\n      firstRowJSON['conceptId'] = this.generateRandomUUID(conceptIdList);\n      if(nameToConcept.hasOwnProperty(firstRowJSON[header[indexVariableName]])){\n          firstRowJSON['conceptId'] = nameToConcept[firstRowJSON[header[indexVariableName]]];\n      }\n      cluster[0][conceptIdReverseLookup['thisRowId']] = firstRowJSON['conceptId']\n      nameToConcept[firstRowJSON[header[indexVariableName]]] = firstRowJSON['conceptId']\n  }\n  else{\n      firstRowJSON['conceptId'] = cluster[0][conceptIdReverseLookup['thisRowId']]\n      nameToConcept[firstRowJSON[header[indexVariableName]]] = firstRowJSON['conceptId']\n  }\n  jsonList.push(firstRowJSON);\n  return cluster;\n\n}\n\nCSVToArray(strData){\n  strData = strData.trim()\n  let arr = [];\n  while(strData.indexOf(\",\") != -1 ){\n      let toPush = \"\";\n      if(strData.substring(0,1) == \"\\\"\"){\n          strData = strData.substring(1);\n          toPush = strData.substring(0,  strData.indexOf(\"\\\"\"));    \n          strData = strData.substring(strData.indexOf(\"\\\"\") + 1);    \n          strData = strData.substring(strData.indexOf(',')+1)\n      }\n      else{\n          toPush = strData.substring(0, strData.indexOf(','));\n          strData = strData.substring(strData.indexOf(',') + 1)\n      }\n      arr.push(toPush)\n\n      //let nextQuote = strData.indexOf(\"\\\"\")\n  }\n    arr.push(strData);\n\n  // Return the parsed data.\n  return( arr );\n}\n\nlookForConcepts(cluster, header, idsToInsert, leftMost){\n  let leafIndex = -1;\n  let nonEmpty = [];\n  for(let i = 1; i < cluster.length; i++){\n      let currArr = cluster[i]\n      for(let j = 0; j < currArr.length; j++){\n          if(currArr[j]!=''){\n              if(!nonEmpty.includes(j)){\n                  nonEmpty.push(j)\n              }\n              if(currArr[j].indexOf('=') != -1){\n                  if(!idsToInsert.includes(j)){\n                      idsToInsert.push(j)    \n                  }\n                  leafIndex = j\n              }\n          }\n      }\n  }\n  for(let i = 0; i < nonEmpty.length; i++){\n      if(nonEmpty[i] != leafIndex && nonEmpty[i] < leftMost[0] && header[nonEmpty[i]] != 'conceptId'){\n          leftMost[0] = nonEmpty[i];\n          leftMost[1] = header[nonEmpty[i]]\n      }\n  }\n  //identify which one is the leaf\n\n}\n\ngetConceptIds(data){\n\n  //first, get all columns that require conceptids\n  //next, check if column to the right has concept id\n  //if it does, add to array, if it doesnt, maybe add to file\n  //keywords: source\n  //Look for columns with clusters\n  let varLabelIndex = 0;\n  let cluster = []\n  let first = true;\n  let currCluster = false;\n  let header = [];\n  let idsToInsert = [];\n  let idsFound = []\n  let conceptIdIndices = []\n  let leftMost = []\n  let leftMostStart = -1;\n  let firstNotSource = -1;\n  let lines = data.split('\\n')\n\n  for(let x = 0; x < lines.length; x++){\n      let line = lines[x]\n\n      //let arr = line.split(',');\n      let arr = this.CSVToArray(line, ',')\n      if(first){\n          header = arr;\n          first = false;\n          for(let i = 0; i < arr.length; i++){\n              if(arr[i] == \"Variable Name\"){\n                  varLabelIndex = i;\n              }\n              if(arr[i].indexOf('Source') != -1){\n                  idsToInsert.push(i)\n              }\n              else if(arr[i].indexOf('conceptId') != -1){\n                  conceptIdIndices.push(i)\n                  idsFound.push(arr[i])\n              }\n              else{\n                  if(firstNotSource == -1 && arr[i] != ''){\n                      idsToInsert.push(i)\n                      firstNotSource = i\n                  }\n              }\n              \n          }\n          leftMostStart = arr.length;\n          leftMost.push(arr.length)\n          leftMost.push('')\n      }\n      else if(currCluster){\n          if(arr[varLabelIndex] == ''){\n              cluster.push(arr);\n          }\n          else{\n              this.lookForConcepts(cluster, header, idsToInsert, leftMost)\n          }\n      }\n      else{\n          cluster.push(arr)\n          currCluster = true;\n      }\n  }\n  this.lookForConcepts(cluster, header, idsToInsert, leftMost);\n  if(!idsToInsert.includes(leftMost[0]) && leftMost[0] != leftMostStart){\n      idsToInsert.push(leftMost[0])\n  }\n  let nonIntersects = []\n  for(let i = 0; i < idsToInsert.length; i++){\n      let found = false;\n      for(let j = 0; j < conceptIdIndices.length; j++){\n          if(idsToInsert[i] == conceptIdIndices[j] + 1){\n              found = true;\n          }\n      }\n      if(found == false){\n          nonIntersects.push(idsToInsert[i])\n      }\n  }\n\n  //sorts in descending order\n  nonIntersects.sort(function(a, b){return b - a})\n  let toWrite ='';\n  first = true;\n  let finalConceptIndices = {};\n  lines = data.split('\\n')\n  for (let x = 0; x < lines.length; x ++){\n      let line = lines[x]\n      let arr = line.split(',')\n      if(first == true){\n          let general = arr[firstNotSource]\n          for(let i = 0; i < nonIntersects.length; i++){\n              arr.splice(nonIntersects[i],0,'conceptId')\n          }\n          toWrite += arr.map(function(value){\n            if(value.indexOf(',') != -1){\n                return \"\\\"\" + value + \"\\\"\";\n            }\n            else{\n                return value;\n            }\n          }).join(\",\");\n          first = false;\n          for(let i = 0; i < arr.length; i++){\n              if(arr[i].includes('conceptId') && i != arr.length - 1){\n                  if(arr[i+1] == general){\n                      finalConceptIndices[i] = 'thisRowId'\n                  }\n                  else if(arr[i+1] == leftMost[1]){\n                      finalConceptIndices[i] = 'leftMostId'\n                  }\n                  else{\n                      finalConceptIndices[i] = arr[i+1]\n                  }\n              }\n          }\n      }   \n      else{\n          for(let i = 0; i < nonIntersects.length; i++){\n              arr.splice(nonIntersects[i],0,'')\n          }\n          toWrite += '\\n'\n          toWrite += arr.map(function(value){\n            if(value.indexOf(',') != -1){\n                return \"\\\"\" + value + \"\\\"\";\n            }\n            else{\n                return value;\n            }\n        }).join(\",\");\n      }\n  }\n\n  this.state.data = toWrite;\n  return finalConceptIndices;\n}\n\nreadFile(data){\n  let jsonList = []\n  let sourceJSONS = []\n  let ConceptIndex = '{}'\n  let idIndex = '[]'\n  let conceptIdList = JSON.parse(idIndex)\n  let varLabelIndex = 0;\n  let cluster = []\n  let conceptIdObject = this.getConceptIds(data)\n  \n  let excelOutput = []\n\n  let first = true;\n  let currCluster = false;\n  let header = [];\n  let nameToConcept = JSON.parse(ConceptIndex);\n  let lines = this.state.data.split('\\n')\n  for (let x = 0; x < lines.length; x++){\n      //let arr = line.split(',');\n      let line = lines[x]\n      let arr = this.CSVToArray(line, ',')\n      if(first){\n          header = arr;\n          first = false;\n          for(let i = 0; i < arr.length; i++){\n              if(arr[i] == \"Variable Name\"){\n                  varLabelIndex = i;\n              }\n          }\n          excelOutput.push([arr])\n      }\n      else if(currCluster){\n          if(arr[varLabelIndex] == ''){\n              cluster.push(arr);\n          }\n          else{\n              let returned = this.processCluster(cluster, header, nameToConcept, varLabelIndex, conceptIdList, conceptIdObject, sourceJSONS, jsonList)\n              excelOutput.push(returned)\n              cluster = [arr]\n              currCluster = true;\n          }\n      }\n      else{\n          cluster.push(arr)\n          currCluster = true;\n      }\n  }\n  let returned = this.processCluster(cluster, header, nameToConcept, varLabelIndex, conceptIdList, conceptIdObject, sourceJSONS, jsonList);\n  excelOutput.push(returned)\n  for(let i = 0; i < sourceJSONS.length; i++){\n      jsonList.push(sourceJSONS[i])\n  }\n  \n  let toPrint = '';\n  for(let i=0; i < excelOutput.length; i++){\n      let cluster = excelOutput[i]\n      for(let j = 0; j < cluster.length; j++){\n          let row = cluster[j]\n          toPrint += cluster[j].map(function(value){\n              if(value.indexOf(',') != -1){\n                  return \"\\\"\" + value + \"\\\"\";\n              }\n              else{\n                  return value;\n              }\n          }).join(\",\");\n          if(i!=excelOutput.length-1 || j!=cluster.length -1){\n              toPrint += '\\n'\n          }\n      }\n  }\n  this.setState({excelOutput:toPrint})\n  let toReturn = ''\n  for(let i = 0; i < jsonList.length; i++){\n    toReturn += JSON.stringify(jsonList[i], null, '    ') + '\\n'\n  }\n  //return JSON.stringify(jsonList, null, '\\t');\n  return jsonList\n\n}\n  handleFileRead = (e) => {\n    const content = this.state.fileReader.result;\n    let response = this.readFile(content)\n    const element = document.createElement(\"a\");\n    const file = new Blob([this.state.excelOutput], {type: 'text/plain'});\n    element.href = URL.createObjectURL(file);\n    element.download = \"myFile.csv\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n    this.setState({JSONoutput:response})\n  }\n  \n  handleCreateReverse = (e) => {\n    let output = this.reverseRead(this.state.textAreaValue)\n    console.log(output)\n    const element = document.createElement(\"a\");\n    const file = new Blob([output], {type: 'text/plain'});\n    element.href = URL.createObjectURL(file);\n    element.download = \"myFile.csv\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  }\n\n  handleFileChosen = (file) => {\n    this.state.fileReader = new FileReader();\n    this.state.fileReader.onloadend = this.handleFileRead;\n    this.state.fileReader.readAsText(file);\n  }\n  getNumSpaces=(str) =>{\n    let numStart = 0;\n    for(let i = 0; i < str.length; i++){\n      if(str.substring(i, i+1) == '-'){\n        numStart += 1;\n      }\n      else{\n        return numStart * 16 + 'px'\n      }\n    }\n    return numStart * 16 + 'px';\n  }\n  removeLeading = (str)=>{\n    let numStart = 0;\n    for(let i = 0; i < str.length; i++){\n      if(str.substring(i, i+1) == '-'){\n        numStart += 1;\n      }\n      else{\n        return str.substring(numStart)\n      }\n    }\n    return str.substring(numStart);\n  }\n  handleChange = (event) =>{\n    console.log(this.state.textAreaValue)\n    this.setState({textAreaValue:event.target.value})\n  }\n  render(){\n    return (\n      <div className=\"App\" style={{'text-align':'left'}}>\n        <header className=\"App-header\" style = {{'font-size':'16px', 'padding-top':'50px', 'padding-bottom':'50px'}}>\n          <h2>CSV to JSONS</h2>\n          <input type='file'\n                 id='file'\n                 className='input-file'\n                 accept='.csv'\n                 onChange={e=>this.handleFileChosen(e.target.files[0])}\n          ></input>\n          <div style = {{'text-align':'center'}}>\n              <p>CSV Rules:</p>\n              <p>There must be a Variable Name field in every full row</p>\n              <p>The leaf nodes (final unit of response) is the only row that is allowed to have an equals sign</p>\n          </div>\n          \n          <div style = {{'padding-left': '50px', 'padding-right':'50px'}}>\n              {this.state.JSONoutput.map(s => (<p>{JSON.stringify(s, null, '-').split('\\n').map((item) => {\n                return (\n                  <span style = {{'padding-left':this.getNumSpaces(item)}}>\n                  {this.removeLeading(item)}\n                  <br/>\n                  </span>\n                )\n              })}</p>))\n              /*JSON.stringify(this.state.JSONoutput)*/}\n          </div>\n          <br/>\n          <br/>\n          <h2>JSONS to CSV</h2>\n          <p>Enter a list of JSONS, and we will generate a csv file for it</p>\n          <div>\n            <textarea\n                value={this.state.textAreaValue}\n                onChange={this.handleChange}\n                rows={10}\n                cols={50}\n                />\n          </div>\n          <button type=\"button\" onClick={this.handleCreateReverse}>Convert!</button>\n        </header>\n\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}